# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: dota_gcmessages_client.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List

import betterproto


class DotaWatchReplayType(betterproto.Enum):
    Normal = 0
    Highlights = 1


class EItemEditorReservationResult(betterproto.Enum):
    OK = 1
    AlreadyExists = 2
    Reserved = 3
    TimedOut = 4


class EFeaturedHeroTextField(betterproto.Enum):
    NewHero = 0
    NewItem = 1
    ItemSetDescription = 2
    ItemDescription = 3
    Hype = 4
    HeroWinLoss = 5
    FrequentlyPlayedHero = 6
    FeaturedItem = 7
    PopularItem = 8
    SaleItem = 9
    SaleDiscount = 10
    Container = 11


class EFeaturedHeroDataType(betterproto.Enum):
    HeroID = 0
    ItemDef = 1
    HypeString = 2
    StartTimestamp = 3
    ExpireTimestamp = 4
    HeroWins = 5
    HeroLosses = 6
    SaleDiscount = 7
    ContainerItemDef = 8


class EWeekendTourneyRichPresenceEvent(betterproto.Enum):
    NONE = 0
    StartedMatch = 1
    WonMatch = 2
    Eliminated = 3


class EdotaTriviaAnswerResult(betterproto.Enum):
    Success = 0
    InvalidQuestion = 1
    InvalidAnswer = 2
    QuestionLocked = 3
    AlreadyAnswered = 4
    TriviaDisabled = 5


class EPurchaseHeroRelicResult(betterproto.Enum):
    Success = 0
    FailedToSend = 1
    NotEnoughPoints = 2
    InternalServerError = 3
    PurchaseNotAllowed = 4
    InvalidRelic = 5
    AlreadyOwned = 6


class EDevEventRequestResult(betterproto.Enum):
    Success = 0
    NotAllowed = 1
    InvalidEvent = 2
    SqlFailure = 3
    Timeout = 4
    LockFailure = 5
    SDOLoadFailure = 6


class ESupportEventRequestResult(betterproto.Enum):
    Success = 0
    Timeout = 1
    CantLockSOCache = 2
    ItemNotInInventory = 3
    InvalidItemDef = 4
    InvalidEvent = 5
    EventExpired = 6
    InvalidSupportAccount = 7
    InvalidSupportMessage = 8
    InvalidEventPoints = 9
    InvalidPremiumPoints = 10
    InvalidActionID = 11
    InvalidActionScore = 12
    TransactionFailed = 13


class ECoachTeammateRating(betterproto.Enum):
    NONE = 0
    Positive = 1
    Negative = 2
    Abusive = 3


class EPlayerCoachMatchFlag(betterproto.Enum):
    EligibleForRewards = 1


class EUnderDraftResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    NoGold = 2
    InvalidSlot = 3
    NoBenchSpace = 4
    NoTickets = 5
    EventNotOwned = 6
    InvalidReward = 7
    HasBigReward = 8
    NoGCConnection = 9
    TooBusy = 10
    CantRollBack = 11


class ETeamFanContentStatus(betterproto.Enum):
    Invalid = 0
    Pending = 1
    Approved = 2
    Rejected = 3


class EdotaDraftTriviaAnswerResult(betterproto.Enum):
    Success = 0
    InvalidMatchID = 1
    AlreadyAnswered = 2
    InternalError = 3
    TriviaDisabled = 4
    GCDown = 5


class CMsgDotaRequestMatchesSkillLevel(betterproto.Enum):
    Any = 0
    Normal = 1
    High = 2
    VeryHigh = 3


class CMsgDotaGetDpcStandingsResponseEStatus(betterproto.Enum):
    Default = 0
    Clinched = 1
    Eliminated = 2


class CMsgDotaPopupPopupId(betterproto.Enum):
    NONE = -1
    KickedFromLobby = 0
    KickedFromParty = 1
    KickedFromTeam = 2
    TeamWasDisbanded = 3
    TeamMatchmakeAlreadyMatch = 4
    TeamMatchmakeAlreadyFinding = 5
    TeamMatchmakeFull = 6
    TeamMatchmakeFailAdd = 7
    TeamMatchmakeFailAddCurrent = 8
    TeamMatchmakeFailedTeamMember = 9
    TeamMatchmakeAlreadyGame = 10
    TeamMatchmakeFailGetParty = 11
    MatchmakingDisabled = 12
    InviteDenied = 13
    PartyFull = 14
    MadeAdmin = 15
    NeedToPurchase = 16
    SignonMessage = 17
    MatchmakingRegionOffline = 19
    TournamentGameNotFound = 21
    TournamentGameHasLobbyId = 22
    TournamentGameHasMatchId = 23
    TournamentGameHasNoRadiantTeam = 24
    TournamentGameHasNoDireTeam = 25
    TournamentGameSqlUpdateFailed = 26
    NotLeagueAdmin = 27
    InAnotherGame = 29
    PartyMemberInAnotherGame = 30
    PartyMemberInLowPriority = 31
    ClientOutOfDate = 32
    SaveGameCorrupt = 38
    InsufficientIngots = 39
    CompetitiveMmNotEnoughPlayTimePlayMoreCasual = 42
    PartyLeaderJoinedLobby = 44
    WeekendTourneyUnmatched = 48
    PostMatchSurvey = 49
    TrophyAwarded = 50
    TrophyLevelUp = 51
    AllHeroChallengeProgress = 52
    NeedInitialSkill = 53
    NeedInitialSkillInParty = 54
    TargetEngineMismatch = 55
    VacNotVerified = 56
    KickedFromQueueEventStarting = 57
    KickedFromQueueEventEnding = 58
    LobbyFull = 62
    EventPointsEarned = 63
    CustomGameIncorrectVersion = 64
    LimitedUserChat = 66
    EventPremiumPointsEarned = 67
    LobbyMvpAwarded = 68
    LowBadgeLevelChat = 71
    LowWinsChat = 72
    UnverifiedUserChat = 73
    PartyStartedFindingEventMatch = 74
    GenericInfo = 69
    GenericError = 70
    RankTierUpdated = 75
    CustomGameCooldownRestricted = 76
    CreateLobbyFailedTooMuchPlaytime = 77
    CustomGameTooFewGames = 78


class CMsgDotaFriendRecruitsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1


class CMsgDotaClaimEventActionResponseResultCode(betterproto.Enum):
    Success = 0
    InvalidEvent = 1
    EventNotActive = 2
    InvalidAction = 3
    ServerError = 4
    InsufficientPoints = 5
    InsufficentLevel = 6
    AlreadyClaimed = 7
    SDOLockFailure = 8
    SDOLoadFailure = 9
    EventNotOwned = 10
    Timeout = 11
    RequiresPlusSubscription = 12
    InvalidItem = 13
    AsyncRewards = 14


class CMsgGcNotificationsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1


class CMsgGcPlayerInfoSubmitResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorInfoLocked = 2
    ErrorNotMemberOfTeam = 3


class CMsgClientToGcVoteForArcanaResponseResult(betterproto.Enum):
    Succeeded = 0
    VotingNotEnabledForRound = 1
    UnknownFailure = 2


class CMsgArcanaVotesVotingState(betterproto.Enum):
    Finished = 0
    InProgress = 1
    InFuture = 2


class CMsgDotaRedeemItemResponseEResultCode(betterproto.Enum):
    Succeeded = 0
    Failed = 1


class CMsgPerfectWorldUserLookupResponseEResultCode(betterproto.Enum):
    SuccessAccountFound = 0
    ErrorUnknown = 1
    ErrorUserNameWrongFormat = 2
    ErrorNoPerfectWorldAccountFound = 3
    ErrorNoLinkedSteamAccountFound = 4


class CMsgClientToGcSelectCompendiumInGamePredictionResponseEResult(betterproto.Enum):
    Success = 0
    InvalidMatch = 1
    PredictionsAreClosed = 2
    OtherError = 3


class CMsgClientToGcOpenPlayerCardPackResponseResult(betterproto.Enum):
    Success = 1
    ErrorInternal = 2
    ErrorFailedToFindPack = 3
    ErrorItemNotCardPack = 4
    ErrorFailedCardCreate = 5


class CMsgClientToGcRecyclePlayerCardResponseResult(betterproto.Enum):
    Success = 1
    ErrorInternal = 2
    ErrorFailedToFindPlayerCard = 3
    ErrorItemNotPlayerCard = 4
    ErrorFailedDustCardCreate = 5
    ErrorCardLocked = 6


class CMsgClientToGcCreatePlayerCardPackResponseResult(betterproto.Enum):
    Success = 1
    ErrorInternal = 2
    ErrorInsufficientDust = 3
    ErrorItemNotDustItem = 4
    ErrorFailedCardPackCreate = 5


class CMsgClientToGcGiveTipResponseResult(betterproto.Enum):
    Success = 0
    ErrorAlreadyTipped = 1
    ErrorInvalidMatchId = 2
    ErrorInvalidEventId = 3
    ErrorInvalidMatchTime = 4
    ErrorNotWinner = 5
    ErrorUnownedEvent = 6
    ErrorInvalidLobbyType = 7
    ErrorUnknown = 8


class CMsgDotaAnchorPhoneNumberResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1
    ErrorNoSteamPhone = 2
    ErrorAlreadyInUse = 3
    ErrorCooldownActive = 4
    ErrorGacIssue = 5


class CMsgDotaUnanchorPhoneNumberResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1


class CMsgGcToClientAllStarVotesSubmitReplyResult(betterproto.Enum):
    Success = 1
    ErrorInternal = 2
    ErrorInvalidEventId = 3
    ErrorInvalidAccountId = 4
    ErrorSelectionsLocked = 5


class CMsgDotaSelectionPriorityChoiceResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1


class CMsgDotaGameAutographRewardResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1


class CMsgDotaDestroyLobbyResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1


class CMsgPurchaseItemWithEventPointsResponseResult(betterproto.Enum):
    Success = 0
    UnknownEvent = 1
    UnknownItem = 2
    BadQuantity = 3
    NotPurchaseable = 4
    SdoLoadFailed = 5
    NotEnoughPoints = 6
    SqlError = 7
    FailedToSend = 8
    ServerError = 9
    NotAllowed = 10
    Cancelled = 11
    ClientError = 12
    SubscriptionRequired = 13


class CMsgClientToGcRecycleHeroRelicResponseResult(betterproto.Enum):
    Success = 1
    ErrorInternal = 2
    ErrorFailedToFindHeroRelic = 3
    ErrorItemNotHeroRelic = 4
    ErrorFailedEventNotOwned = 5


class CMsgProfileResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3


class CMsgProfileUpdateResponseResult(betterproto.Enum):
    Success = 0
    Failure = 1


class CMsgActivatePlusFreeTrialResponseResult(betterproto.Enum):
    Success = 0
    ErrorGeneric = 1
    ErrorAlreadyInFreeTrial = 2
    ErrorAlreadyUsedFreeTrial = 3
    ErrorOfferNotValid = 4


class CMsgClientToGcCavernCrawlClaimRoomResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1
    ReceivedUltraRareReward = 2


class CMsgClientToGcCavernCrawlUseItemOnRoomResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1
    ReceivedUltraRareReward = 2


class CMsgClientToGcCavernCrawlUseItemOnPathResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1
    ReceivedUltraRareReward = 2


class CMsgClientToGcCavernCrawlRequestMapStateResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1
    EventNotOwned = 2


class CMsgClientToGcCavernCrawlGetClaimedRoomCountResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnknown = 1
    EventNotOwned = 2


class CMsgSocialFeedResponseResult(betterproto.Enum):
    Success = 0
    FailedToLoadFriends = 1
    FailedToLoadFeedData = 2
    FailedToLoadFeedEntry = 3
    FailedToLoadComments = 4
    FailedTooManyRequests = 5


class CMsgSocialFeedCommentsResponseResult(betterproto.Enum):
    Success = 0
    FailedTooManyRequests = 1
    FailedToLoadComments = 2


class CMsgClientToGcPlayerCardSpecificPurchaseResponseResult(betterproto.Enum):
    Success = 1
    ErrorInternal = 2
    ErrorInsufficientDust = 3
    ErrorItemNotDustItem = 4
    ErrorFailedCardPackCreate = 5


class CMsgClientToGcRequestContestVotesResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3


class CMsgGcToClientRecordContestVoteResponseEResult(betterproto.Enum):
    Success = 0
    FailedEventNotOwned = 1
    FailedSqlInsertFailed = 2
    FailedInvalidContest = 3
    FailedContestNotActive = 4
    FailedTimeout = 5


class CMsgDotadpcFeedEFeedElementType(betterproto.Enum):
    FeedSeriesResult = 1
    FeedMatchPopular = 2
    FeedTeamUpcomingMatch = 3
    FeedTeamLeagueResult = 4
    FeedTeamAddPlayer = 5
    FeedTeamRemovePlayer = 6
    FeedTeamDisband = 7
    FeedLeagueUpcoming = 8
    FeedLeagueConcluded = 9
    FeedDpcStandings = 10
    FeedAlertPredictions = 11
    FeedAlertFantasy = 12
    FeedLeagueLiveMatch = 13
    FeedLeagueInprogressSeries = 14


class CMsgGcToClientGetFilteredPlayersResponseResult(betterproto.Enum):
    Success = 0
    Failure = 1


class CMsgGcToClientRemoveFilteredPlayerResponseResult(betterproto.Enum):
    Success = 0
    Failure = 1


class CMsgClientToGcUpdatePartyBeaconAction(betterproto.Enum):
    On = 0
    Off = 1


class CMsgGcToClientRequestActiveBeaconPartiesResponseEResponse(betterproto.Enum):
    Success = 0
    Failure = 1
    Busy = 2


class CMsgGcToClientJoinPartyFromBeaconResponseEResponse(betterproto.Enum):
    Success = 0
    Failure = 1
    Busy = 2
    NotLeader = 3


class CMsgClientToGcManageFavoritesAction(betterproto.Enum):
    Add = 0
    Remove = 1


class CMsgGcToClientManageFavoritesResponseEResponse(betterproto.Enum):
    Success = 0
    Failure = 1
    NoInvitePresent = 2
    InviteSent = 3
    Expired = 4
    Busy = 5


class CMsgGcToClientGetFavoritePlayersResponseEResponse(betterproto.Enum):
    Success = 0
    Failure = 1


class CMsgClientToGcRequestPlayerRecentAccomplishmentsResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3


class CMsgClientToGcRequestPlayerHeroRecentAccomplishmentsResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3


class CMsgClientToGcRequestPlayerCoachMatchesResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3


class CMsgClientToGcRequestPlayerCoachMatchResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3


class CMsgClientToGcSubmitCoachTeammateRatingResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3
    InvalidInput = 4
    AlreadySubmitted = 5
    VotingFinished = 6
    PlayerNotInMatch = 7
    CoachNotInMatch = 8
    PlayerNotOnCoachTeam = 9
    PlayerInSamePartyAsCoach = 10
    MatchNotEligible = 11


class CMsgClientToGcSubmitPlayerMatchSurveyResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3
    AlreadySubmitted = 4
    PlayerNotValid = 5


class CMsgClientToGcSetFavoriteAllStarPlayerResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3
    AlreadySubmitted = 4
    PlayerNotValid = 5
    DoesntOwnEvent = 6
    EventNotValid = 7


class CMsgClientToGcGetFavoriteAllStarPlayerResponseEResponse(betterproto.Enum):
    Success = 0
    NoPick = 1
    InternalError = 2


class CMsgSetTeamFanContentStatusResponseEResult(betterproto.Enum):
    Success = 0
    InternalError = 1


class CMsgClientToGcRecalibrateMmrResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    Timeout = 2
    TooBusy = 3
    NotPermitted = 4


class CMsgClientToGcGetOwMatchDetailsResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    Timeout = 2
    TooBusy = 3
    NotPermitted = 4
    NoCaseAvailable = 5


class CMsgClientToGcSubmitOwConvictionResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    Timeout = 2
    TooBusy = 3
    NotPermitted = 4
    InvalidReplayID = 5
    InvalidConviction = 6
    InvalidPlayerSlot = 7


class CMsgClientToGcGetDpcFavoritesResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    TooBusy = 2
    Disabled = 3
    Timeout = 4
    InvalidRequest = 5


class CMsgClientToGcSetDpcFavoriteStateResponseEResponse(betterproto.Enum):
    InternalError = 0
    Success = 1
    FavoriteTypeOutOfRange = 2
    LockFailed = 3
    AlreadyFavorited = 4
    AlreadyUnfavorited = 5
    InsertRecordFailed = 6
    RemoveRecordFailed = 7
    Timeout = 8


@dataclass(eq=False, repr=False)
class CMsgClientSuspended(betterproto.Message):
    time_end: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgBalancedShuffleLobby(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgInitialQuestionnaireResponse(betterproto.Message):
    initial_skill: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaPlayerMatchHistory(betterproto.Message):
    match_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaMatchHistoryFilter(betterproto.Message):
    match_ids: List[int] = betterproto.uint64_field(1)
    newest_match_id_at_last_query: int = betterproto.uint64_field(2)
    time_last_query: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaRequestMatches(betterproto.Message):
    hero_id: int = betterproto.uint32_field(2)
    game_mode: int = betterproto.uint32_field(3)
    date_min: int = betterproto.fixed32_field(6)
    date_max: int = betterproto.fixed32_field(7)
    matches_requested: int = betterproto.uint32_field(10)
    start_at_match_id: int = betterproto.uint64_field(11)
    min_players: int = betterproto.fixed32_field(12)
    request_id: int = betterproto.uint32_field(13)
    account_id: int = betterproto.uint32_field(15)
    league_id: int = betterproto.uint32_field(16)
    skill: "CMsgDotaRequestMatchesSkillLevel" = betterproto.enum_field(17)
    team_id: int = betterproto.uint32_field(18)
    custom_game_id: int = betterproto.uint64_field(20)


@dataclass(eq=False, repr=False)
class CMsgDotaRequestMatchesResponse(betterproto.Message):
    matches: List["_dota_gcmessages_common__.CMsgDotaMatch"] = betterproto.message_field(1)
    series: List["CMsgDotaRequestMatchesResponseSeries"] = betterproto.message_field(2)
    request_id: int = betterproto.uint32_field(3)
    total_results: int = betterproto.uint32_field(4)
    results_remaining: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgDotaRequestMatchesResponseSeries(betterproto.Message):
    matches: List["_dota_gcmessages_common__.CMsgDotaMatch"] = betterproto.message_field(1)
    series_id: int = betterproto.uint32_field(2)
    series_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaGetDpcStandingsResponse(betterproto.Message):
    standings: List["CMsgDotaGetDpcStandingsResponseTeamInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaGetDpcStandingsResponseTeamInfo(betterproto.Message):
    team_id: int = betterproto.uint32_field(1)
    team_name: str = betterproto.string_field(2)
    dpc_points: int = betterproto.uint32_field(3)
    team_logo_url: str = betterproto.string_field(4)
    status: "CMsgDotaGetDpcStandingsResponseEStatus" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class CMsgDotaPopup(betterproto.Message):
    id: "CMsgDotaPopupPopupId" = betterproto.enum_field(1)
    custom_text: str = betterproto.string_field(2)
    int_data: int = betterproto.sint32_field(3)
    popup_data: bytes = betterproto.bytes_field(4)
    loc_token_header: str = betterproto.string_field(5)
    loc_token_msg: str = betterproto.string_field(6)
    var_names: List[str] = betterproto.string_field(7)
    var_values: List[str] = betterproto.string_field(8)
    debug_text: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class CMsgDotaReportsRemainingRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaReportsRemainingResponse(betterproto.Message):
    num_positive_reports_remaining: int = betterproto.uint32_field(1)
    num_negative_reports_remaining: int = betterproto.uint32_field(2)
    num_positive_reports_total: int = betterproto.uint32_field(3)
    num_negative_reports_total: int = betterproto.uint32_field(4)
    num_comms_reports_remaining: int = betterproto.uint32_field(5)
    num_comms_reports_total: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitPlayerReport(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    report_flags: int = betterproto.uint32_field(2)
    lobby_id: int = betterproto.uint64_field(4)
    comment: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitPlayerReportResponse(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    report_flags: int = betterproto.uint32_field(2)
    result: int = betterproto.uint32_field(3)
    debug_message: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitPlayerAvoidRequest(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    lobby_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitPlayerAvoidRequestResponse(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    result: int = betterproto.uint32_field(2)
    debug_message: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaReportCountsRequest(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaReportCountsResponse(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    leadership_count: int = betterproto.uint32_field(2)
    teaching_count: int = betterproto.uint32_field(3)
    friendly_count: int = betterproto.uint32_field(4)
    forgiving_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitLobbyMvpVote(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitLobbyMvpVoteResponse(betterproto.Message):
    target_account_id: int = betterproto.uint32_field(1)
    eresult: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaLobbyMvpNotifyRecipient(betterproto.Message):
    voter_account_id: int = betterproto.uint32_field(1)
    recipient_account_id: int = betterproto.uint32_field(2)
    num_votes: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaLobbyMvpAwarded(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    mvp_account_id: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaKickedFromMatchmakingQueue(betterproto.Message):
    match_type: "_dota_shared_enums__.MatchType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaRequestSaveGames(betterproto.Message):
    server_region: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaRequestSaveGamesResponse(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    save_games: List["_dota_shared_enums__.CdotaSaveGame"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcMatchDetailsRequest(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcMatchDetailsResponse(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    match: "_dota_gcmessages_common__.CMsgDotaMatch" = betterproto.message_field(2)
    vote: "_dota_shared_enums__.DotaMatchVote" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class CMsgServerToGcMatchDetailsRequest(betterproto.Message):
    match_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToServerMatchDetailsResponse(betterproto.Message):
    matches: List["_dota_gcmessages_common__.CMsgDotaMatch"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaProfileTickets(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    league_passes: List["CMsgDotaProfileTicketsLeaguePass"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaProfileTicketsLeaguePass(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    item_def: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetProfileTickets(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaClearNotifySuccessfulReport(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcToClientPartySearchInvites(betterproto.Message):
    invites: List["CMsgGcToClientPartySearchInvite"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaWelcome(betterproto.Message):
    store_item_hash: int = betterproto.uint32_field(5)
    timeplayedconsecutively: int = betterproto.uint32_field(6)
    allow_3_rd_party_match_history: bool = betterproto.bool_field(7)
    partner_account_type: "_gcsdk_gcmessages__.PartnerAccountType" = betterproto.enum_field(8)
    partner_account_state: int = betterproto.uint32_field(11)
    last_time_played: int = betterproto.uint32_field(12)
    last_ip_address: int = betterproto.uint32_field(13)
    shutdownlawterminateminutes: int = betterproto.uint32_field(15)
    banned_word_list_version: int = betterproto.uint32_field(16)
    profile_private: bool = betterproto.bool_field(17)
    currency: int = betterproto.uint32_field(18)
    pwrd_cyber_cafe_id: int = betterproto.uint32_field(19)
    should_request_player_origin: bool = betterproto.bool_field(20)
    gc_socache_file_version: int = betterproto.uint32_field(22)
    is_perfect_world_test_account: bool = betterproto.bool_field(24)
    extra_messages: List["CMsgDotaWelcomeCExtraMsg"] = betterproto.message_field(26)
    minimum_recent_item_id: int = betterproto.uint64_field(27)
    active_event: "_dota_shared_enums__.EEvent" = betterproto.enum_field(28)
    additional_user_message: int = betterproto.uint32_field(29)
    custom_game_whitelist_version: int = betterproto.uint32_field(30)
    party_search_friend_invites: "CMsgGcToClientPartySearchInvites" = betterproto.message_field(31)
    remaining_playtime: int = betterproto.int32_field(32)
    disable_guild_persona_info: bool = betterproto.bool_field(33)
    extra_message_blocks: List["_econ_gcmessages__.CExtraMsgBlock"] = betterproto.message_field(34)


@dataclass(eq=False, repr=False)
class CMsgDotaWelcomeCExtraMsg(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    contents: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CsodotaGameHeroFavorites(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaHeroFavoritesAdd(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaHeroFavoritesRemove(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaFeaturedItems(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    featured_item_id: List[int] = betterproto.uint64_field(2)
    object_data: List[bytes] = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaMatchVotes(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    votes: List["CMsgDotaMatchVotesPlayerVote"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaMatchVotesPlayerVote(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    vote: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgCastMatchVote(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    vote: "_dota_shared_enums__.DotaMatchVote" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CMsgRetrieveMatchVote(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    incremental: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgMatchVoteResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)
    vote: "_dota_shared_enums__.DotaMatchVote" = betterproto.enum_field(2)
    positive_votes: int = betterproto.uint32_field(3)
    negative_votes: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaHallOfFame(betterproto.Message):
    week: int = betterproto.uint32_field(1)
    featured_players: List["CMsgDotaHallOfFameFeaturedPlayer"] = betterproto.message_field(2)
    featured_farmer: "CMsgDotaHallOfFameFeaturedFarmer" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaHallOfFameFeaturedPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)
    average_scaled_metric: float = betterproto.float_field(3)
    num_games: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaHallOfFameFeaturedFarmer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)
    gold_per_min: int = betterproto.uint32_field(3)
    match_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaHallOfFameRequest(betterproto.Message):
    week: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaHallOfFameResponse(betterproto.Message):
    hall_of_fame: "CMsgDotaHallOfFame" = betterproto.message_field(1)
    eresult: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaHalloweenHighScoreRequest(betterproto.Message):
    round: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaHalloweenHighScoreResponse(betterproto.Message):
    score: int = betterproto.uint32_field(1)
    match: "_dota_gcmessages_common__.CMsgDotaMatch" = betterproto.message_field(2)
    eresult: int = betterproto.uint32_field(3)
    round: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaStorePromoPagesRequest(betterproto.Message):
    version_seen: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaStorePromoPagesResponse(betterproto.Message):
    pages: List["CMsgDotaStorePromoPagesResponsePromoPage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaStorePromoPagesResponsePromoPage(betterproto.Message):
    promo_id: int = betterproto.uint32_field(1)
    title: str = betterproto.string_field(2)
    url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgMatchmakingMatchGroupInfo(betterproto.Message):
    players_searching: int = betterproto.uint32_field(1)
    auto_region_select_ping_penalty: int = betterproto.sint32_field(2)
    auto_region_select_ping_penalty_custom: int = betterproto.sint32_field(4)
    status: "_dota_shared_enums__.EMatchGroupServerStatus" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaMatchmakingStatsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaMatchmakingStatsResponse(betterproto.Message):
    matchgroups_version: int = betterproto.uint32_field(1)
    legacy_searching_players_by_group_source2: List[int] = betterproto.uint32_field(7)
    match_groups: List["CMsgMatchmakingMatchGroupInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class CMsgDotaUpdateMatchmakingStats(betterproto.Message):
    stats: "CMsgDotaMatchmakingStatsResponse" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaUpdateMatchManagementStats(betterproto.Message):
    stats: "CMsgDotaMatchmakingStatsResponse" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaSetMatchHistoryAccess(betterproto.Message):
    allow_3_rd_party_match_history: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaSetMatchHistoryAccessResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaNotifyAccountFlagsChange(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    account_flags: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaSetProfilePrivacy(betterproto.Message):
    profile_private: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaSetProfilePrivacyResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgUpgradeLeagueItem(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    league_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgUpgradeLeagueItemResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcWatchDownloadedReplay(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    watch_type: "DotaWatchReplayType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CMsgSetMapLocationState(betterproto.Message):
    location_id: int = betterproto.int32_field(1)
    completed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgSetMapLocationStateResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgResetMapLocations(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgResetMapLocationsResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgRefreshPartnerAccountLink(betterproto.Message):
    partner_type: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientsRejoinChatChannels(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaSendFriendRecruits(betterproto.Message):
    recruits: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaFriendRecruitsRequest(betterproto.Message):
    account_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaFriendRecruitsResponse(betterproto.Message):
    result: "CMsgDotaFriendRecruitsResponseEResult" = betterproto.enum_field(1)
    recruits: List["CMsgDotaFriendRecruitsResponseFriendRecruitStatus"] = betterproto.message_field(2)
    recruiters: List["CMsgDotaFriendRecruitsResponseFriendRecruitStatus"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaFriendRecruitsResponseFriendRecruitStatus(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    status: int = betterproto.uint32_field(2)
    levels_earned: int = betterproto.uint32_field(3)
    bonus: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaFriendRecruitInviteAcceptDecline(betterproto.Message):
    accepted: bool = betterproto.bool_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgRequestLeaguePrizePool(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgRequestLeaguePrizePoolResponse(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    prize_pool: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroStandings(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroStandingsResponse(betterproto.Message):
    standings: List["CMsgGcGetHeroStandingsResponseHero"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroStandingsResponseHero(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    wins: int = betterproto.uint32_field(2)
    losses: int = betterproto.uint32_field(3)
    win_streak: int = betterproto.uint32_field(4)
    best_win_streak: int = betterproto.uint32_field(5)
    avg_kills: float = betterproto.float_field(6)
    avg_deaths: float = betterproto.float_field(7)
    avg_assists: float = betterproto.float_field(8)
    avg_gpm: float = betterproto.float_field(9)
    avg_xpm: float = betterproto.float_field(10)
    best_kills: int = betterproto.uint32_field(11)
    best_assists: int = betterproto.uint32_field(12)
    best_gpm: int = betterproto.uint32_field(13)
    best_xpm: int = betterproto.uint32_field(14)
    performance: float = betterproto.float_field(15)
    wins_with_ally: int = betterproto.uint32_field(16)
    losses_with_ally: int = betterproto.uint32_field(17)
    wins_against_enemy: int = betterproto.uint32_field(18)
    losses_against_enemy: int = betterproto.uint32_field(19)
    networth_peak: int = betterproto.uint32_field(20)
    lasthit_peak: int = betterproto.uint32_field(21)
    deny_peak: int = betterproto.uint32_field(22)
    damage_peak: int = betterproto.uint32_field(23)
    longest_game_peak: int = betterproto.uint32_field(24)
    healing_peak: int = betterproto.uint32_field(25)
    avg_lasthits: float = betterproto.float_field(26)
    avg_denies: float = betterproto.float_field(27)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroTimedStats(betterproto.Message):
    hero_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMatchPlayerTimedStatAverages(betterproto.Message):
    kills: float = betterproto.float_field(2)
    deaths: float = betterproto.float_field(3)
    assists: float = betterproto.float_field(4)
    net_worth: float = betterproto.float_field(5)
    last_hits: float = betterproto.float_field(6)
    denies: float = betterproto.float_field(7)
    item_value: float = betterproto.float_field(8)
    support_gold_spent: float = betterproto.float_field(9)
    camps_stacked: float = betterproto.float_field(10)
    wards_placed: float = betterproto.float_field(11)
    dewards: float = betterproto.float_field(12)
    triple_kills: float = betterproto.float_field(13)
    rampages: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class CMatchPlayerTimedStatStdDeviations(betterproto.Message):
    kills: float = betterproto.float_field(2)
    deaths: float = betterproto.float_field(3)
    assists: float = betterproto.float_field(4)
    net_worth: float = betterproto.float_field(5)
    last_hits: float = betterproto.float_field(6)
    denies: float = betterproto.float_field(7)
    item_value: float = betterproto.float_field(8)
    support_gold_spent: float = betterproto.float_field(9)
    camps_stacked: float = betterproto.float_field(10)
    wards_placed: float = betterproto.float_field(11)
    dewards: float = betterproto.float_field(12)
    triple_kills: float = betterproto.float_field(13)
    rampages: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroTimedStatsResponse(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    rank_chunked_stats: List["CMsgGcGetHeroTimedStatsResponseRankChunkedStats"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroTimedStatsResponseTimedStatsContainer(betterproto.Message):
    time: int = betterproto.uint32_field(1)
    all_stats: "CMatchPlayerTimedStatAverages" = betterproto.message_field(2)
    winning_stats: "CMatchPlayerTimedStatAverages" = betterproto.message_field(3)
    losing_stats: "CMatchPlayerTimedStatAverages" = betterproto.message_field(4)
    winning_stddevs: "CMatchPlayerTimedStatStdDeviations" = betterproto.message_field(5)
    losing_stddevs: "CMatchPlayerTimedStatStdDeviations" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroTimedStatsResponseRankChunkedStats(betterproto.Message):
    rank_chunk: int = betterproto.uint32_field(1)
    timed_stats: List["CMsgGcGetHeroTimedStatsResponseTimedStatsContainer"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgHeroRoleStats(betterproto.Message):
    lane_selection_flags: int = betterproto.uint32_field(1)
    match_count: int = betterproto.uint32_field(2)
    win_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgHeroRoleHeroStats(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    role_stats: List["CMsgHeroRoleStats"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgHeroRoleRankStats(betterproto.Message):
    rank_tier: int = betterproto.uint32_field(1)
    hero_stats: List["CMsgHeroRoleHeroStats"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgHeroRoleAllRanksStats(betterproto.Message):
    start_timestamp: int = betterproto.uint32_field(1)
    end_timestamp: int = betterproto.uint32_field(2)
    rank_stats: List["CMsgHeroRoleRankStats"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReservationsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReservation(betterproto.Message):
    def_index: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReservationsResponse(betterproto.Message):
    reservations: List["CMsgGcItemEditorReservation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReserveItemDef(betterproto.Message):
    def_index: int = betterproto.uint32_field(1)
    username: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReserveItemDefResponse(betterproto.Message):
    def_index: int = betterproto.uint32_field(1)
    username: str = betterproto.string_field(2)
    result: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReleaseReservation(betterproto.Message):
    def_index: int = betterproto.uint32_field(1)
    username: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcItemEditorReleaseReservationResponse(betterproto.Message):
    def_index: int = betterproto.uint32_field(1)
    released: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaRewardTutorialPrizes(betterproto.Message):
    location_id: int = betterproto.uint32_field(1)
    tracking_only: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaLastHitChallengeHighScorePost(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    high_score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaLastHitChallengeHighScoreRequest(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaLastHitChallengeHighScoreResponse(betterproto.Message):
    score: int = betterproto.uint32_field(1)
    eresult: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgFlipLobbyTeams(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgPresentedClientTerminateDlg(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcLobbyUpdateBroadcastChannelInfo(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    country_code: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    language_code: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventActionData(betterproto.Message):
    grant_item_gift_data: "CMsgDotaClaimEventActionDataGrantItemGiftData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventActionDataGrantItemGiftData(betterproto.Message):
    give_to_account_id: int = betterproto.uint32_field(1)
    gift_message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventAction(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    action_id: int = betterproto.uint32_field(2)
    quantity: int = betterproto.uint32_field(3)
    data: "CMsgDotaClaimEventActionData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventActionResponse(betterproto.Message):
    result: "CMsgDotaClaimEventActionResponseResultCode" = betterproto.enum_field(1)
    reward_results: List["CMsgDotaClaimEventActionResponseGrantedRewardData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventActionResponseMysteryItemRewardData(betterproto.Message):
    item_def: int = betterproto.uint32_field(1)
    item_category: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventActionResponseLootListRewardData(betterproto.Message):
    item_def: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaClaimEventActionResponseGrantedRewardData(betterproto.Message):
    grant_index: int = betterproto.uint32_field(1)
    score_index: int = betterproto.uint32_field(2)
    reward_index: int = betterproto.uint32_field(3)
    reward_data: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcClaimEventActionUsingItem(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    action_id: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint64_field(3)
    quantity: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcClaimEventActionUsingItemResponse(betterproto.Message):
    action_results: "CMsgDotaClaimEventActionResponse" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientClaimEventActionUsingItemCompleted(betterproto.Message):
    item_id: int = betterproto.uint64_field(1)
    action_results: "CMsgDotaClaimEventActionResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaGetEventPoints(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaGetEventPointsResponse(betterproto.Message):
    total_points: int = betterproto.uint32_field(1)
    total_premium_points: int = betterproto.uint32_field(2)
    event_id: int = betterproto.uint32_field(3)
    points: int = betterproto.uint32_field(4)
    premium_points: int = betterproto.uint32_field(5)
    completed_actions: List["CMsgDotaGetEventPointsResponseAction"] = betterproto.message_field(6)
    account_id: int = betterproto.uint32_field(7)
    owned: bool = betterproto.bool_field(8)
    audit_action: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CMsgDotaGetEventPointsResponseAction(betterproto.Message):
    action_id: int = betterproto.uint32_field(1)
    times_completed: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaGetPeriodicResource(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    periodic_resource_id: int = betterproto.uint32_field(2)
    timestamp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaGetPeriodicResourceResponse(betterproto.Message):
    periodic_resource_max: int = betterproto.uint32_field(1)
    periodic_resource_used: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaPeriodicResourceUpdated(betterproto.Message):
    periodic_resource_key: "CMsgDotaGetPeriodicResource" = betterproto.message_field(1)
    periodic_resource_value: "CMsgDotaGetPeriodicResourceResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaLiveLeagueGameUpdate(betterproto.Message):
    live_league_games: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumSelection(betterproto.Message):
    selection_index: int = betterproto.uint32_field(1)
    selection: int = betterproto.uint32_field(2)
    leagueid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumSelectionResponse(betterproto.Message):
    eresult: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumData(betterproto.Message):
    selections: List["CMsgDotaCompendiumSelection"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumDataRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    leagueid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumDataResponse(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    leagueid: int = betterproto.uint32_field(2)
    result: int = betterproto.uint32_field(3)
    compendium_data: "CMsgDotaCompendiumData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaGetPlayerMatchHistory(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    start_at_match_id: int = betterproto.uint64_field(2)
    matches_requested: int = betterproto.uint32_field(3)
    hero_id: int = betterproto.uint32_field(4)
    request_id: int = betterproto.uint32_field(5)
    include_practice_matches: bool = betterproto.bool_field(7)
    include_custom_games: bool = betterproto.bool_field(8)
    include_event_games: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class CMsgDotaGetPlayerMatchHistoryResponse(betterproto.Message):
    matches: List["CMsgDotaGetPlayerMatchHistoryResponseMatch"] = betterproto.message_field(1)
    request_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaGetPlayerMatchHistoryResponseMatch(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    start_time: int = betterproto.uint32_field(2)
    hero_id: int = betterproto.uint32_field(3)
    winner: bool = betterproto.bool_field(4)
    game_mode: int = betterproto.uint32_field(5)
    rank_change: int = betterproto.int32_field(6)
    previous_rank: int = betterproto.uint32_field(7)
    lobby_type: int = betterproto.uint32_field(8)
    solo_rank: bool = betterproto.bool_field(9)
    abandon: bool = betterproto.bool_field(10)
    duration: int = betterproto.uint32_field(11)
    engine: int = betterproto.uint32_field(12)
    active_plus_subscription: bool = betterproto.bool_field(13)
    seasonal_rank: bool = betterproto.bool_field(14)
    tourney_id: int = betterproto.uint32_field(15)
    tourney_round: int = betterproto.uint32_field(16)
    tourney_tier: int = betterproto.uint32_field(17)
    tourney_division: int = betterproto.uint32_field(18)
    team_id: int = betterproto.uint32_field(19)
    team_name: str = betterproto.string_field(20)
    ugc_team_ui_logo: int = betterproto.uint64_field(21)


@dataclass(eq=False, repr=False)
class CMsgDotaStartDailyHeroChallenge(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcNotificationsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcNotificationsResponse(betterproto.Message):
    result: "CMsgGcNotificationsResponseEResult" = betterproto.enum_field(1)
    notifications: List["CMsgGcNotificationsResponseNotification"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcNotificationsResponseNotification(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    type: int = betterproto.uint32_field(2)
    timestamp: int = betterproto.uint32_field(3)
    reference_a: int = betterproto.uint32_field(4)
    reference_b: int = betterproto.uint32_field(5)
    reference_c: int = betterproto.uint32_field(6)
    message: str = betterproto.string_field(7)
    unread: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CMsgGcNotificationsMarkReadRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcMarkNotificationListRead(betterproto.Message):
    notification_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcPlayerInfoRequest(betterproto.Message):
    player_infos: List["CMsgGcPlayerInfoRequestPlayerInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcPlayerInfoRequestPlayerInfo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcPlayerInfoSubmit(betterproto.Message):
    name: str = betterproto.string_field(1)
    country_code: str = betterproto.string_field(2)
    fantasy_role: int = betterproto.uint32_field(3)
    team_id: int = betterproto.uint32_field(4)
    sponsor: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcPlayerInfoSubmitResponse(betterproto.Message):
    result: "CMsgGcPlayerInfoSubmitResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientProvideSurveyResult(betterproto.Message):
    responses: List["CMsgClientProvideSurveyResultResponse"] = betterproto.message_field(1)
    survey_key: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientProvideSurveyResultResponse(betterproto.Message):
    question_id: int = betterproto.uint32_field(1)
    survey_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaEmoticonAccessSdo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    unlocked_emoticons: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcEmoticonDataRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcToClientEmoticonData(betterproto.Message):
    emoticon_access: "CMsgDotaEmoticonAccessSdo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcTrackDialogResult(betterproto.Message):
    dialog_id: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientTournamentItemDrop(betterproto.Message):
    item_def: int = betterproto.uint32_field(1)
    event_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetAdditionalEquips(betterproto.Message):
    equips: List["_dota_gcmessages_common__.CAdditionalEquipSlot"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetAdditionalEquipsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetAdditionalEquips(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetAdditionalEquipsResponse(betterproto.Message):
    equips: List["_dota_gcmessages_common__.CAdditionalEquipSlot"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetAllHeroOrder(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetAllHeroOrderResponse(betterproto.Message):
    hero_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetAllHeroProgress(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetAllHeroProgressResponse(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    curr_hero_id: int = betterproto.uint32_field(2)
    laps_completed: int = betterproto.uint32_field(3)
    curr_hero_games: int = betterproto.uint32_field(4)
    curr_lap_time_started: int = betterproto.uint32_field(5)
    curr_lap_games: int = betterproto.uint32_field(6)
    best_lap_games: int = betterproto.uint32_field(7)
    best_lap_time: int = betterproto.uint32_field(8)
    lap_heroes_completed: int = betterproto.uint32_field(9)
    lap_heroes_remaining: int = betterproto.uint32_field(10)
    next_hero_id: int = betterproto.uint32_field(11)
    prev_hero_id: int = betterproto.uint32_field(12)
    prev_hero_games: int = betterproto.uint32_field(13)
    prev_avg_tries: float = betterproto.float_field(14)
    curr_avg_tries: float = betterproto.float_field(15)
    next_avg_tries: float = betterproto.float_field(16)
    full_lap_avg_tries: float = betterproto.float_field(17)
    curr_lap_avg_tries: float = betterproto.float_field(18)
    profile_name: str = betterproto.string_field(19)
    start_hero_id: int = betterproto.uint32_field(20)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetTrophyList(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetTrophyListResponse(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    trophies: List["CMsgClientToGcGetTrophyListResponseTrophy"] = betterproto.message_field(2)
    profile_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetTrophyListResponseTrophy(betterproto.Message):
    trophy_id: int = betterproto.uint32_field(1)
    trophy_score: int = betterproto.uint32_field(2)
    last_updated: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientTrophyAwarded(betterproto.Message):
    trophy_id: int = betterproto.uint32_field(1)
    trophy_score: int = betterproto.uint32_field(2)
    trophy_old_score: int = betterproto.uint32_field(3)
    last_updated: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetProfileCard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetProfileCardSlots(betterproto.Message):
    slots: List["CMsgClientToGcSetProfileCardSlotsCardSlot"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetProfileCardSlotsCardSlot(betterproto.Message):
    slot_id: int = betterproto.uint32_field(1)
    slot_type: "_dota_shared_enums__.EProfileCardSlotType" = betterproto.enum_field(2)
    slot_value: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetProfileCardStats(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcCreateHeroStatue(betterproto.Message):
    source_item: int = betterproto.uint64_field(1)
    hero_id: int = betterproto.uint32_field(3)
    sequence_name: str = betterproto.string_field(4)
    cycle: float = betterproto.float_field(5)
    wearables: List[int] = betterproto.uint32_field(6)
    inscription: str = betterproto.string_field(7)
    styles: List[int] = betterproto.uint32_field(8)
    reforger_item: int = betterproto.uint64_field(9)
    tournament_drop: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class CMsgGcToClientHeroStatueCreateResult(betterproto.Message):
    resulting_item: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientEventStatusChanged(betterproto.Message):
    active_event: "_dota_shared_enums__.EEvent" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcPlayerStatsRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientPlayerStatsResponse(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    player_stats: List[float] = betterproto.float_field(2)
    match_count: int = betterproto.uint32_field(3)
    mean_gpm: float = betterproto.float_field(4)
    mean_xppm: float = betterproto.float_field(5)
    mean_lasthits: float = betterproto.float_field(6)
    rampages: int = betterproto.uint32_field(7)
    triple_kills: int = betterproto.uint32_field(8)
    first_blood_claimed: int = betterproto.uint32_field(9)
    first_blood_given: int = betterproto.uint32_field(10)
    couriers_killed: int = betterproto.uint32_field(11)
    aegises_snatched: int = betterproto.uint32_field(12)
    cheeses_eaten: int = betterproto.uint32_field(13)
    creeps_stacked: int = betterproto.uint32_field(14)
    fight_score: float = betterproto.float_field(15)
    farm_score: float = betterproto.float_field(16)
    support_score: float = betterproto.float_field(17)
    push_score: float = betterproto.float_field(18)
    versatility_score: float = betterproto.float_field(19)
    mean_networth: float = betterproto.float_field(20)
    mean_damage: float = betterproto.float_field(21)
    mean_heals: float = betterproto.float_field(22)
    rapiers_purchased: int = betterproto.uint32_field(23)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCustomGamePlayerCountRequest(betterproto.Message):
    custom_game_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCustomGamePlayerCountResponse(betterproto.Message):
    custom_game_id: int = betterproto.uint64_field(1)
    player_count: int = betterproto.uint64_field(2)
    spectator_count: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCustomGamesFriendsPlayedRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcToClientCustomGamesFriendsPlayedResponse(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    games: List["CMsgGcToClientCustomGamesFriendsPlayedResponseCustomGame"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCustomGamesFriendsPlayedResponseCustomGame(betterproto.Message):
    custom_game_id: int = betterproto.uint64_field(1)
    account_ids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSocialFeedPostCommentRequest(betterproto.Message):
    event_id: int = betterproto.uint64_field(1)
    comment: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientSocialFeedPostCommentResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSocialFeedPostMessageRequest(betterproto.Message):
    message: str = betterproto.string_field(1)
    match_id: int = betterproto.uint64_field(2)
    match_timestamp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientSocialFeedPostMessageResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcFriendsPlayedCustomGameRequest(betterproto.Message):
    custom_game_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientFriendsPlayedCustomGameResponse(betterproto.Message):
    custom_game_id: int = betterproto.uint64_field(1)
    account_ids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaPartyRichPresence(betterproto.Message):
    party_id: int = betterproto.fixed64_field(1)
    party_state: "_dota_gcmessages_common_match_management__.CsodotaPartyState" = betterproto.enum_field(2)
    open: bool = betterproto.bool_field(3)
    low_priority: bool = betterproto.bool_field(5)
    team_id: int = betterproto.uint32_field(7)
    team_name: str = betterproto.string_field(8)
    ugc_team_ui_logo: int = betterproto.uint64_field(9)
    members: List["CMsgDotaPartyRichPresenceMember"] = betterproto.message_field(4)
    weekend_tourney: "CMsgDotaPartyRichPresenceWeekendTourney" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CMsgDotaPartyRichPresenceMember(betterproto.Message):
    steam_id: int = betterproto.fixed64_field(1)
    coach: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaPartyRichPresenceWeekendTourney(betterproto.Message):
    division: int = betterproto.uint32_field(1)
    skill_level: int = betterproto.uint32_field(2)
    round: int = betterproto.uint32_field(3)
    tournament_id: int = betterproto.uint32_field(4)
    state_seq_num: int = betterproto.uint32_field(5)
    event: "EWeekendTourneyRichPresenceEvent" = betterproto.enum_field(6)
    event_round: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CMsgDotaLobbyRichPresence(betterproto.Message):
    lobby_id: int = betterproto.fixed64_field(1)
    lobby_state: "_dota_gcmessages_common_match_management__.CsodotaLobbyState" = betterproto.enum_field(2)
    password: bool = betterproto.bool_field(3)
    game_mode: "_dota_shared_enums__.DotaGameMode" = betterproto.enum_field(4)
    member_count: int = betterproto.uint32_field(5)
    max_member_count: int = betterproto.uint32_field(6)
    custom_game_id: int = betterproto.fixed64_field(7)
    name: str = betterproto.string_field(8)
    lobby_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CMsgDotaCustomGameListenServerStartedLoading(betterproto.Message):
    lobby_id: int = betterproto.fixed64_field(1)
    custom_game_id: int = betterproto.uint64_field(2)
    lobby_members: List[int] = betterproto.uint32_field(3)
    start_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaCustomGameClientFinishedLoading(betterproto.Message):
    lobby_id: int = betterproto.fixed64_field(1)
    loading_duration: int = betterproto.uint32_field(2)
    result_code: int = betterproto.sint32_field(3)
    result_string: str = betterproto.string_field(4)
    signon_states: int = betterproto.uint32_field(5)
    comment: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientToGcApplyGemCombiner(betterproto.Message):
    item_id_1: int = betterproto.uint64_field(1)
    item_id_2: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGch264Unsupported(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestH264Support(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetQuestProgress(betterproto.Message):
    quest_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetQuestProgressResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    quests: List["CMsgClientToGcGetQuestProgressResponseQuest"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetQuestProgressResponseChallenge(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    time_completed: int = betterproto.uint32_field(2)
    attempts: int = betterproto.uint32_field(3)
    hero_id: int = betterproto.uint32_field(4)
    template_id: int = betterproto.uint32_field(5)
    quest_rank: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetQuestProgressResponseQuest(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    completed_challenges: List["CMsgClientToGcGetQuestProgressResponseChallenge"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientMatchSignedOut(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroStatsHistory(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcGetHeroStatsHistoryResponse(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    records: List["_dota_gcmessages_common__.CMsgDotasdoHeroStatsHistory"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgPlayerConductScorecardRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgPlayerConductScorecard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    match_id: int = betterproto.uint64_field(2)
    seq_num: int = betterproto.uint32_field(3)
    reasons: int = betterproto.uint32_field(4)
    matches_in_report: int = betterproto.uint32_field(5)
    matches_clean: int = betterproto.uint32_field(6)
    matches_reported: int = betterproto.uint32_field(7)
    matches_abandoned: int = betterproto.uint32_field(8)
    reports_count: int = betterproto.uint32_field(9)
    reports_parties: int = betterproto.uint32_field(10)
    commend_count: int = betterproto.uint32_field(11)
    date: int = betterproto.uint32_field(14)
    behavior_grade: int = betterproto.uint32_field(15)
    raw_behavior_score: int = betterproto.uint32_field(17)
    old_raw_behavior_score: int = betterproto.uint32_field(18)
    comms_reports: int = betterproto.uint32_field(19)
    comms_parties: int = betterproto.uint32_field(20)


@dataclass(eq=False, repr=False)
class CMsgClientToGcWageringRequest(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientWageringResponse(betterproto.Message):
    coins_remaining: int = betterproto.uint32_field(1)
    total_points_won: int = betterproto.uint32_field(2)
    total_points_wagered: int = betterproto.uint32_field(3)
    total_points_tipped: int = betterproto.uint32_field(4)
    success_rate: int = betterproto.uint32_field(5)
    total_games_wagered: int = betterproto.uint32_field(6)
    coins_max: int = betterproto.uint32_field(7)
    rank_wagers_remaining: int = betterproto.uint32_field(8)
    rank_wagers_max: int = betterproto.uint32_field(9)
    prediction_tokens_remaining: int = betterproto.uint32_field(10)
    prediction_tokens_max: int = betterproto.uint32_field(11)
    bounties_remaining: int = betterproto.uint32_field(12)
    bounties_max: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class CMsgGcToClientWageringUpdate(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    wagering_info: "CMsgGcToClientWageringResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientArcanaVotesUpdate(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    arcana_votes: "CMsgClientToGcRequestArcanaVotesRemainingResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetEventGoals(betterproto.Message):
    event_ids: List["_dota_shared_enums__.EEvent"] = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgEventGoals(betterproto.Message):
    event_goals: List["CMsgEventGoalsEventGoal"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgEventGoalsEventGoal(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    goal_id: int = betterproto.uint32_field(2)
    value: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToGcLeaguePredictions(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgPredictionRankings(betterproto.Message):
    predictions: List["CMsgPredictionRankingsPrediction"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgPredictionRankingsPredictionLine(betterproto.Message):
    answer_id: int = betterproto.uint32_field(1)
    answer_name: str = betterproto.string_field(2)
    answer_logo: int = betterproto.uint64_field(3)
    answer_value: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class CMsgPredictionRankingsPrediction(betterproto.Message):
    selection_id: int = betterproto.uint32_field(1)
    prediction_lines: List["CMsgPredictionRankingsPredictionLine"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgPredictionResults(betterproto.Message):
    results: List["CMsgPredictionResultsResult"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgPredictionResultsResultBreakdown(betterproto.Message):
    answer_selection: int = betterproto.uint32_field(2)
    answer_value: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class CMsgPredictionResultsResult(betterproto.Message):
    selection_id: int = betterproto.uint32_field(1)
    result_breakdown: List["CMsgPredictionResultsResultBreakdown"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSuspiciousActivity(betterproto.Message):
    app_data: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcHasPlayerVotedForMvp(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcHasPlayerVotedForMvpResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVoteForLeagueGameMvp(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    account_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVoteForMvp(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    account_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVoteForMvpResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcmvpVoteTimeout(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcmvpVoteTimeoutResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgMvpVotesForMatch(betterproto.Message):
    players: List["CMsgMvpVotesForMatchPlayer"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgMvpVotesForMatchPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    vote_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcTeammateStatsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcTeammateStatsResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    teammate_stats: List["CMsgClientToGcTeammateStatsResponseTeammateStat"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcTeammateStatsResponseTeammateStat(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    games: int = betterproto.uint32_field(2)
    wins: int = betterproto.uint32_field(3)
    most_recent_game_timestamp: int = betterproto.uint32_field(4)
    most_recent_game_match_id: int = betterproto.uint64_field(5)
    performance: float = betterproto.float_field(100)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVoteForArcana(betterproto.Message):
    matches: List["_dota_gcmessages_common__.CMsgArcanaVoteMatchVotes"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVoteForArcanaResponse(betterproto.Message):
    result: "CMsgClientToGcVoteForArcanaResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgArcanaVotes(betterproto.Message):
    matches: List["CMsgArcanaVotesMatch"] = betterproto.message_field(1)
    round_time_remaining: int = betterproto.uint32_field(2)
    round_number: int = betterproto.uint32_field(3)
    voting_state: int = betterproto.uint32_field(4)
    is_current_round_calibrating: bool = betterproto.bool_field(5)
    closest_active_match_id: int = betterproto.uint32_field(6)
    event_id: int = betterproto.uint32_field(7)
    voting_start_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgArcanaVotesMatch(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    hero_id_0: int = betterproto.uint32_field(2)
    hero_id_1: int = betterproto.uint32_field(3)
    hero_seeding_0: int = betterproto.uint32_field(4)
    hero_seeding_1: int = betterproto.uint32_field(5)
    vote_count_0: int = betterproto.uint32_field(6)
    vote_count_1: int = betterproto.uint32_field(7)
    voting_state: int = betterproto.uint32_field(8)
    round_number: int = betterproto.uint32_field(9)
    is_votes_hidden: bool = betterproto.bool_field(10)
    calibration_time_remaining: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestArcanaVotesRemaining(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestArcanaVotesRemainingResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)
    votes_remaining: int = betterproto.uint32_field(2)
    votes_total: int = betterproto.uint32_field(3)
    matches_previously_voted_for: List[
        "_dota_gcmessages_common__.CMsgArcanaVoteMatchVotes"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestEventPointLogV2(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestEventPointLogResponseV2(betterproto.Message):
    result: bool = betterproto.bool_field(1)
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(2)
    log_entries: List["CMsgClientToGcRequestEventPointLogResponseV2LogEntry"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestEventPointLogResponseV2LogEntry(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    audit_action: int = betterproto.uint32_field(2)
    event_points: int = betterproto.int32_field(3)
    audit_data: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcPublishUserStat(betterproto.Message):
    user_stats_event: int = betterproto.uint32_field(1)
    reference_data: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcAddTi6TreeProgress(betterproto.Message):
    trees: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestSlarkGameResult(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    slot_chosen: int = betterproto.uint32_field(2)
    week: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestSlarkGameResultResponse(betterproto.Message):
    points_won: int = betterproto.uint32_field(1)
    aura_won: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientQuestProgressUpdated(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    completed_challenges: List["CMsgGcToClientQuestProgressUpdatedChallenge"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientQuestProgressUpdatedChallenge(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    time_completed: int = betterproto.uint32_field(2)
    attempts: int = betterproto.uint32_field(3)
    hero_id: int = betterproto.uint32_field(4)
    template_id: int = betterproto.uint32_field(5)
    quest_rank: int = betterproto.uint32_field(6)
    max_quest_rank: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CMsgDotaRedeemItem(betterproto.Message):
    currency_id: int = betterproto.uint64_field(1)
    purchase_def: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaRedeemItemResponse(betterproto.Message):
    response: "CMsgDotaRedeemItemResponseEResultCode" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgPerfectWorldUserLookupRequest(betterproto.Message):
    user_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgPerfectWorldUserLookupResponse(betterproto.Message):
    result_code: "CMsgPerfectWorldUserLookupResponseEResultCode" = betterproto.enum_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgMakeOffering(betterproto.Message):
    item_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgRequestOfferings(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgRequestOfferingsResponse(betterproto.Message):
    offerings: List["CMsgRequestOfferingsResponseNewYearsOffering"] = betterproto.message_field(1)
    completed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgRequestOfferingsResponseNewYearsOffering(betterproto.Message):
    def_index: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotapcBangTimedReward(betterproto.Message):
    persona: str = betterproto.string_field(1)
    itemdef: int = betterproto.uint32_field(2)
    pcbangname: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumInGamePredictionResults(betterproto.Message):
    results: List["CMsgDotaCompendiumInGamePredictionResultsPredictionResult"] = betterproto.message_field(1)
    league_id: int = betterproto.uint32_field(2)
    predictions_closed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgDotaCompendiumInGamePredictionResultsPredictionResult(betterproto.Message):
    prediction_id: int = betterproto.uint32_field(1)
    prediction_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSelectCompendiumInGamePrediction(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    predictions: List["CMsgClientToGcSelectCompendiumInGamePredictionPrediction"] = betterproto.message_field(2)
    league_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSelectCompendiumInGamePredictionPrediction(betterproto.Message):
    prediction_id: int = betterproto.uint32_field(1)
    prediction_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSelectCompendiumInGamePredictionResponse(betterproto.Message):
    result: "CMsgClientToGcSelectCompendiumInGamePredictionResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcOpenPlayerCardPack(betterproto.Message):
    player_card_pack_item_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcOpenPlayerCardPackResponse(betterproto.Message):
    result: "CMsgClientToGcOpenPlayerCardPackResponseResult" = betterproto.enum_field(1)
    player_card_item_ids: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecyclePlayerCard(betterproto.Message):
    player_card_item_ids: List[int] = betterproto.uint64_field(3)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecyclePlayerCardResponse(betterproto.Message):
    result: "CMsgClientToGcRecyclePlayerCardResponseResult" = betterproto.enum_field(1)
    dust_amount: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCreatePlayerCardPack(betterproto.Message):
    card_dust_item_id: int = betterproto.uint64_field(1)
    event_id: int = betterproto.uint32_field(2)
    premium_pack: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCreatePlayerCardPackResponse(betterproto.Message):
    result: "CMsgClientToGcCreatePlayerCardPackResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016(betterproto.Message):
    battle_pass_level: int = betterproto.uint32_field(1)
    questlines: List["CMsgGcToClientBattlePassRollupInternational2016Questlines"] = betterproto.message_field(2)
    wagering: "CMsgGcToClientBattlePassRollupInternational2016Wagering" = betterproto.message_field(3)
    achievements: "CMsgGcToClientBattlePassRollupInternational2016Achievements" = betterproto.message_field(4)
    battle_cup: "CMsgGcToClientBattlePassRollupInternational2016BattleCup" = betterproto.message_field(5)
    predictions: "CMsgGcToClientBattlePassRollupInternational2016Predictions" = betterproto.message_field(6)
    bracket: "CMsgGcToClientBattlePassRollupInternational2016Bracket" = betterproto.message_field(7)
    player_cards: List["CMsgGcToClientBattlePassRollupInternational2016PlayerCard"] = betterproto.message_field(8)
    fantasy_challenge: "CMsgGcToClientBattlePassRollupInternational2016FantasyChallenge" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016Questlines(betterproto.Message):
    name: str = betterproto.string_field(1)
    onestar: int = betterproto.uint32_field(2)
    twostar: int = betterproto.uint32_field(3)
    threestar: int = betterproto.uint32_field(4)
    total: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016Wagering(betterproto.Message):
    total_wagered: int = betterproto.uint32_field(1)
    total_won: int = betterproto.uint32_field(2)
    average_won: int = betterproto.uint32_field(3)
    success_rate: int = betterproto.uint32_field(4)
    total_tips: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016Achievements(betterproto.Message):
    completed: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016BattleCup(betterproto.Message):
    wins: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016Predictions(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016Bracket(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    points: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016PlayerCard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    quality: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupInternational2016FantasyChallenge(betterproto.Message):
    total_score: float = betterproto.float_field(1)
    percentile: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016(betterproto.Message):
    battle_pass_level: int = betterproto.uint32_field(1)
    questlines: List["CMsgGcToClientBattlePassRollupFall2016Questlines"] = betterproto.message_field(2)
    wagering: "CMsgGcToClientBattlePassRollupFall2016Wagering" = betterproto.message_field(3)
    achievements: "CMsgGcToClientBattlePassRollupFall2016Achievements" = betterproto.message_field(4)
    battle_cup: "CMsgGcToClientBattlePassRollupFall2016BattleCup" = betterproto.message_field(5)
    predictions: "CMsgGcToClientBattlePassRollupFall2016Predictions" = betterproto.message_field(6)
    bracket: "CMsgGcToClientBattlePassRollupFall2016Bracket" = betterproto.message_field(7)
    player_cards: List["CMsgGcToClientBattlePassRollupFall2016PlayerCard"] = betterproto.message_field(8)
    fantasy_challenge: "CMsgGcToClientBattlePassRollupFall2016FantasyChallenge" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016Questlines(betterproto.Message):
    name: str = betterproto.string_field(1)
    onestar: int = betterproto.uint32_field(2)
    twostar: int = betterproto.uint32_field(3)
    threestar: int = betterproto.uint32_field(4)
    total: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016Wagering(betterproto.Message):
    total_wagered: int = betterproto.uint32_field(1)
    total_won: int = betterproto.uint32_field(2)
    average_won: int = betterproto.uint32_field(3)
    success_rate: int = betterproto.uint32_field(4)
    total_tips: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016Achievements(betterproto.Message):
    completed: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016BattleCup(betterproto.Message):
    wins: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016Predictions(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016Bracket(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    points: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016PlayerCard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    quality: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupFall2016FantasyChallenge(betterproto.Message):
    total_score: float = betterproto.float_field(1)
    percentile: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017(betterproto.Message):
    battle_pass_level: int = betterproto.uint32_field(1)
    questlines: List["CMsgGcToClientBattlePassRollupWinter2017Questlines"] = betterproto.message_field(2)
    wagering: "CMsgGcToClientBattlePassRollupWinter2017Wagering" = betterproto.message_field(3)
    achievements: "CMsgGcToClientBattlePassRollupWinter2017Achievements" = betterproto.message_field(4)
    battle_cup: "CMsgGcToClientBattlePassRollupWinter2017BattleCup" = betterproto.message_field(5)
    predictions: "CMsgGcToClientBattlePassRollupWinter2017Predictions" = betterproto.message_field(6)
    bracket: "CMsgGcToClientBattlePassRollupWinter2017Bracket" = betterproto.message_field(7)
    player_cards: List["CMsgGcToClientBattlePassRollupWinter2017PlayerCard"] = betterproto.message_field(8)
    fantasy_challenge: "CMsgGcToClientBattlePassRollupWinter2017FantasyChallenge" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017Questlines(betterproto.Message):
    name: str = betterproto.string_field(1)
    onestar: int = betterproto.uint32_field(2)
    twostar: int = betterproto.uint32_field(3)
    threestar: int = betterproto.uint32_field(4)
    total: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017Wagering(betterproto.Message):
    total_wagered: int = betterproto.uint32_field(1)
    total_won: int = betterproto.uint32_field(2)
    average_won: int = betterproto.uint32_field(3)
    success_rate: int = betterproto.uint32_field(4)
    total_tips: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017Achievements(betterproto.Message):
    completed: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017BattleCup(betterproto.Message):
    wins: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017Predictions(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017Bracket(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    points: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017PlayerCard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    quality: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupWinter2017FantasyChallenge(betterproto.Message):
    total_score: float = betterproto.float_field(1)
    percentile: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7(betterproto.Message):
    battle_pass_level: int = betterproto.uint32_field(1)
    questlines: List["CMsgGcToClientBattlePassRollupTi7Questlines"] = betterproto.message_field(2)
    wagering: "CMsgGcToClientBattlePassRollupTi7Wagering" = betterproto.message_field(3)
    achievements: "CMsgGcToClientBattlePassRollupTi7Achievements" = betterproto.message_field(4)
    battle_cup: "CMsgGcToClientBattlePassRollupTi7BattleCup" = betterproto.message_field(5)
    predictions: "CMsgGcToClientBattlePassRollupTi7Predictions" = betterproto.message_field(6)
    bracket: "CMsgGcToClientBattlePassRollupTi7Bracket" = betterproto.message_field(7)
    player_cards: List["CMsgGcToClientBattlePassRollupTi7PlayerCard"] = betterproto.message_field(8)
    fantasy_challenge: "CMsgGcToClientBattlePassRollupTi7FantasyChallenge" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7Questlines(betterproto.Message):
    name: str = betterproto.string_field(1)
    onestar: int = betterproto.uint32_field(2)
    twostar: int = betterproto.uint32_field(3)
    threestar: int = betterproto.uint32_field(4)
    total: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7Wagering(betterproto.Message):
    total_wagered: int = betterproto.uint32_field(1)
    total_won: int = betterproto.uint32_field(2)
    average_won: int = betterproto.uint32_field(3)
    success_rate: int = betterproto.uint32_field(4)
    total_tips: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7Achievements(betterproto.Message):
    completed: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7BattleCup(betterproto.Message):
    wins: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7Predictions(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7Bracket(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    points: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7PlayerCard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    quality: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi7FantasyChallenge(betterproto.Message):
    total_score: float = betterproto.float_field(1)
    percentile: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8(betterproto.Message):
    battle_pass_level: int = betterproto.uint32_field(1)
    cavern_crawl: "CMsgGcToClientBattlePassRollupTi8CavernCrawl" = betterproto.message_field(2)
    wagering: "CMsgGcToClientBattlePassRollupTi8Wagering" = betterproto.message_field(3)
    achievements: "CMsgGcToClientBattlePassRollupTi8Achievements" = betterproto.message_field(4)
    predictions: "CMsgGcToClientBattlePassRollupTi8Predictions" = betterproto.message_field(6)
    bracket: "CMsgGcToClientBattlePassRollupTi8Bracket" = betterproto.message_field(7)
    player_cards: List["CMsgGcToClientBattlePassRollupTi8PlayerCard"] = betterproto.message_field(8)
    fantasy_challenge: "CMsgGcToClientBattlePassRollupTi8FantasyChallenge" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8CavernCrawl(betterproto.Message):
    rooms_cleared: int = betterproto.uint32_field(1)
    carry_completed: bool = betterproto.bool_field(2)
    support_completed: bool = betterproto.bool_field(3)
    utility_completed: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8Wagering(betterproto.Message):
    total_wagered: int = betterproto.uint32_field(1)
    total_won: int = betterproto.uint32_field(2)
    average_won: int = betterproto.uint32_field(3)
    success_rate: int = betterproto.uint32_field(4)
    total_tips: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8Achievements(betterproto.Message):
    completed: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8Predictions(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    total: int = betterproto.uint32_field(2)
    points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8Bracket(betterproto.Message):
    correct: int = betterproto.uint32_field(1)
    points: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8PlayerCard(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    quality: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi8FantasyChallenge(betterproto.Message):
    total_score: float = betterproto.float_field(1)
    percentile: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupTi9(betterproto.Message):
    battle_pass_level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupRequest(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupResponse(betterproto.Message):
    event_ti6: "CMsgGcToClientBattlePassRollupInternational2016" = betterproto.message_field(1)
    event_fall2016: "CMsgGcToClientBattlePassRollupFall2016" = betterproto.message_field(2)
    event_winter2017: "CMsgGcToClientBattlePassRollupWinter2017" = betterproto.message_field(3)
    event_ti7: "CMsgGcToClientBattlePassRollupTi7" = betterproto.message_field(4)
    event_ti8: "CMsgGcToClientBattlePassRollupTi8" = betterproto.message_field(5)
    event_ti9: "CMsgGcToClientBattlePassRollupTi9" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupListRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupListResponse(betterproto.Message):
    event_info: List["CMsgGcToClientBattlePassRollupListResponseEventInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientBattlePassRollupListResponseEventInfo(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcTransferSeasonalMmrRequest(betterproto.Message):
    is_party: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcTransferSeasonalMmrResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientPlaytestStatus(betterproto.Message):
    active: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcJoinPlaytest(betterproto.Message):
    client_version: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcJoinPlaytestResponse(betterproto.Message):
    error: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaSetFavoriteTeam(betterproto.Message):
    team_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaTriviaCurrentQuestions(betterproto.Message):
    questions: List["_dota_gcmessages_common__.CMsgDotaTriviaQuestion"] = betterproto.message_field(1)
    trivia_enabled: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitTriviaQuestionAnswer(betterproto.Message):
    question_id: int = betterproto.uint32_field(1)
    answer_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaSubmitTriviaQuestionAnswerResponse(betterproto.Message):
    result: "EdotaTriviaAnswerResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaStartTriviaSession(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaStartTriviaSessionResponse(betterproto.Message):
    trivia_enabled: bool = betterproto.bool_field(1)
    current_timestamp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGiveTip(betterproto.Message):
    recipient_account_id: int = betterproto.uint32_field(1)
    match_id: int = betterproto.uint64_field(2)
    event_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGiveTipResponse(betterproto.Message):
    result: "CMsgClientToGcGiveTipResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaAnchorPhoneNumberRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaAnchorPhoneNumberResponse(betterproto.Message):
    result: "CMsgDotaAnchorPhoneNumberResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaUnanchorPhoneNumberRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaUnanchorPhoneNumberResponse(betterproto.Message):
    result: "CMsgDotaUnanchorPhoneNumberResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientTipNotification(betterproto.Message):
    tipper_account_id: int = betterproto.uint32_field(1)
    tipper_name: str = betterproto.string_field(2)
    recipient_account_id: int = betterproto.uint32_field(3)
    recipient_name: str = betterproto.string_field(4)
    event_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCommendNotification(betterproto.Message):
    commender_account_id: int = betterproto.uint32_field(1)
    commender_name: str = betterproto.string_field(2)
    flags: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientAllStarVotesRequest(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientAllStarVotesReply(betterproto.Message):
    player_account_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientAllStarVotesSubmit(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    player_account_ids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientAllStarVotesSubmitReply(betterproto.Message):
    result: "CMsgGcToClientAllStarVotesSubmitReplyResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaClientToGcQuickStatsRequest(betterproto.Message):
    player_account_id: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)
    league_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaClientToGcQuickStatsResponse(betterproto.Message):
    original_request: "CMsgDotaClientToGcQuickStatsRequest" = betterproto.message_field(1)
    hero_stats: "CMsgDotaClientToGcQuickStatsResponseSimpleStats" = betterproto.message_field(2)
    item_stats: "CMsgDotaClientToGcQuickStatsResponseSimpleStats" = betterproto.message_field(3)
    item_hero_stats: "CMsgDotaClientToGcQuickStatsResponseSimpleStats" = betterproto.message_field(4)
    item_player_stats: "CMsgDotaClientToGcQuickStatsResponseSimpleStats" = betterproto.message_field(5)
    hero_player_stats: "CMsgDotaClientToGcQuickStatsResponseSimpleStats" = betterproto.message_field(6)
    full_set_stats: "CMsgDotaClientToGcQuickStatsResponseSimpleStats" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CMsgDotaClientToGcQuickStatsResponseSimpleStats(betterproto.Message):
    win_percent: float = betterproto.float_field(1)
    pick_percent: float = betterproto.float_field(2)
    win_count: int = betterproto.uint32_field(3)
    pick_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDotaSelectionPriorityChoiceRequest(betterproto.Message):
    choice: "_dota_shared_enums__.DotaSelectionPriorityChoice" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaSelectionPriorityChoiceResponse(betterproto.Message):
    result: "CMsgDotaSelectionPriorityChoiceResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaGameAutographReward(betterproto.Message):
    badge_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaGameAutographRewardResponse(betterproto.Message):
    result: "CMsgDotaGameAutographRewardResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaDestroyLobbyRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaDestroyLobbyResponse(betterproto.Message):
    result: "CMsgDotaDestroyLobbyResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaGetRecentPlayTimeFriendsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgDotaGetRecentPlayTimeFriendsResponse(betterproto.Message):
    account_ids: List[int] = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CMsgPurchaseItemWithEventPoints(betterproto.Message):
    item_def: int = betterproto.uint32_field(1)
    quantity: int = betterproto.uint32_field(2)
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(3)
    use_premium_points: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgPurchaseItemWithEventPointsResponse(betterproto.Message):
    result: "CMsgPurchaseItemWithEventPointsResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcRequestItemRecommendations(betterproto.Message):
    mmr: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)
    allied_hero_ids: List[int] = betterproto.uint32_field(3)
    enemy_hero_ids: List[int] = betterproto.uint32_field(4)
    inventory_items: List[int] = betterproto.uint32_field(5)
    game_time: int = betterproto.int32_field(6)
    gold: int = betterproto.uint32_field(7)
    net_worth: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgGcRequestItemRecommendationsResponse(betterproto.Message):
    recommended_item_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcRequestSkillUpRecommendations(betterproto.Message):
    mmr: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)
    allied_hero_ids: List[int] = betterproto.uint32_field(3)
    enemy_hero_ids: List[int] = betterproto.uint32_field(4)
    ability_ids: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgGcRequestSkillUpRecommendationsResponse(betterproto.Message):
    abilities: List["CMsgGcRequestSkillUpRecommendationsResponseAbilitySelection"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcRequestSkillUpRecommendationsResponseAbilitySelection(betterproto.Message):
    ability_id: int = betterproto.uint32_field(1)
    weight: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecycleHeroRelic(betterproto.Message):
    item_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecycleHeroRelicResponse(betterproto.Message):
    result: "CMsgClientToGcRecycleHeroRelicResponseResult" = betterproto.enum_field(1)
    dust_amount: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgPurchaseHeroRelic(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    kill_eater_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgPurchaseHeroRelicResponse(betterproto.Message):
    result: "EPurchaseHeroRelicResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgPurchaseHeroRandomRelic(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgPurchaseHeroRandomRelicResponse(betterproto.Message):
    result: "EPurchaseHeroRelicResult" = betterproto.enum_field(1)
    kill_eater_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlusWeeklyChallengeResult(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    week: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlusWeeklyChallengeResultResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgProfileRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgProfileResponse(betterproto.Message):
    background_item: "_base_gcmessages__.CsoEconItem" = betterproto.message_field(1)
    featured_heroes: List["CMsgProfileResponseFeaturedHero"] = betterproto.message_field(2)
    recent_matches: List["CMsgProfileResponseMatchInfo"] = betterproto.message_field(3)
    successful_heroes: List["_dota_gcmessages_common__.CMsgSuccessfulHero"] = betterproto.message_field(4)
    recent_match_details: "_dota_gcmessages_common__.CMsgRecentMatchInfo" = betterproto.message_field(5)
    result: "CMsgProfileResponseEResponse" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class CMsgProfileResponseFeaturedHero(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    equipped_econ_items: List["_base_gcmessages__.CsoEconItem"] = betterproto.message_field(2)
    manually_set: bool = betterproto.bool_field(3)
    plus_hero_xp: int = betterproto.uint32_field(4)
    plus_hero_relics_item: "_base_gcmessages__.CsoEconItem" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CMsgProfileResponseMatchInfo(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    match_timestamp: int = betterproto.uint32_field(2)
    performance_rating: int = betterproto.sint32_field(3)
    hero_id: int = betterproto.uint32_field(4)
    won_match: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CMsgProfileUpdate(betterproto.Message):
    background_item_id: int = betterproto.uint64_field(1)
    featured_hero_ids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgProfileUpdateResponse(betterproto.Message):
    result: "CMsgProfileUpdateResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgTalentWinRates(betterproto.Message):
    last_run: int = betterproto.uint32_field(1)
    ability_id: int = betterproto.uint32_field(2)
    game_count: int = betterproto.uint32_field(3)
    win_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgGlobalHeroAverages(betterproto.Message):
    last_run: int = betterproto.uint32_field(1)
    avg_gold_per_min: int = betterproto.uint32_field(3)
    avg_xp_per_min: int = betterproto.uint32_field(4)
    avg_kills: int = betterproto.uint32_field(5)
    avg_deaths: int = betterproto.uint32_field(6)
    avg_assists: int = betterproto.uint32_field(7)
    avg_last_hits: int = betterproto.uint32_field(8)
    avg_denies: int = betterproto.uint32_field(9)
    avg_net_worth: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataRequest(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataResponse(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    hero_data_per_chunk: List["CMsgHeroGlobalDataResponseHeroDataPerRankChunk"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataResponseGraphData(betterproto.Message):
    day: int = betterproto.uint32_field(1)
    win_percent: float = betterproto.float_field(2)
    pick_percent: float = betterproto.float_field(3)
    ban_percent: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataResponseWeekData(betterproto.Message):
    week: int = betterproto.uint32_field(1)
    win_percent: float = betterproto.float_field(2)
    pick_percent: float = betterproto.float_field(3)
    ban_percent: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataResponseHeroDataPerRankChunk(betterproto.Message):
    rank_chunk: int = betterproto.uint32_field(1)
    talent_win_rates: List["CMsgTalentWinRates"] = betterproto.message_field(2)
    hero_averages: "CMsgGlobalHeroAverages" = betterproto.message_field(3)
    graph_data: List["CMsgHeroGlobalDataResponseGraphData"] = betterproto.message_field(4)
    week_data: List["CMsgHeroGlobalDataResponseWeekData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataAllHeroes(betterproto.Message):
    heroes: List["CMsgHeroGlobalDataResponse"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataHeroesAlliesAndEnemies(betterproto.Message):
    ranked_hero_data: List["CMsgHeroGlobalDataHeroesAlliesAndEnemiesRankedHeroData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataHeroesAlliesAndEnemiesHeroData(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    win_rate: int = betterproto.uint32_field(2)
    first_other_hero_id: int = betterproto.uint32_field(3)
    ally_win_rate: List[int] = betterproto.uint32_field(5)
    enemy_win_rate: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgHeroGlobalDataHeroesAlliesAndEnemiesRankedHeroData(betterproto.Message):
    rank: int = betterproto.uint32_field(1)
    hero_data: List["CMsgHeroGlobalDataHeroesAlliesAndEnemiesHeroData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgPrivateMetadataKeyRequest(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgPrivateMetadataKeyResponse(betterproto.Message):
    private_key: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgActivatePlusFreeTrialRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgActivatePlusFreeTrialResponse(betterproto.Message):
    result: "CMsgActivatePlusFreeTrialResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCavernCrawlMapPathCompleted(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    hero_id_completed: int = betterproto.uint32_field(2)
    completed_paths: List["CMsgGcToClientCavernCrawlMapPathCompletedCompletedPathInfo"] = betterproto.message_field(3)
    map_variant: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCavernCrawlMapPathCompletedCompletedPathInfo(betterproto.Message):
    path_id_completed: int = betterproto.uint32_field(1)
    received_ultra_rare_reward: bool = betterproto.bool_field(2)
    half_completed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCavernCrawlMapUpdated(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlClaimRoom(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    room_id: int = betterproto.uint32_field(2)
    map_variant: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlClaimRoomResponse(betterproto.Message):
    result: "CMsgClientToGcCavernCrawlClaimRoomResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlUseItemOnRoom(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    room_id: int = betterproto.uint32_field(2)
    item_type: int = betterproto.uint32_field(3)
    map_variant: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlUseItemOnRoomResponse(betterproto.Message):
    result: "CMsgClientToGcCavernCrawlUseItemOnRoomResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlUseItemOnPath(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    path_id: int = betterproto.uint32_field(2)
    item_type: int = betterproto.uint32_field(3)
    map_variant: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlUseItemOnPathResponse(betterproto.Message):
    result: "CMsgClientToGcCavernCrawlUseItemOnPathResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlRequestMapState(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlRequestMapStateResponse(betterproto.Message):
    result: "CMsgClientToGcCavernCrawlRequestMapStateResponseResult" = betterproto.enum_field(1)
    available_map_variants_mask: int = betterproto.uint32_field(2)
    inventory_item: List["CMsgClientToGcCavernCrawlRequestMapStateResponseInventoryItem"] = betterproto.message_field(3)
    map_variants: List["CMsgClientToGcCavernCrawlRequestMapStateResponseMapVariant"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlRequestMapStateResponseSwappedChallenge(betterproto.Message):
    path_id_1: int = betterproto.uint32_field(1)
    path_id_2: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlRequestMapStateResponseInventoryItem(betterproto.Message):
    item_type: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlRequestMapStateResponseTreasureMap(betterproto.Message):
    map_room_id: int = betterproto.uint32_field(1)
    revealed_room_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlRequestMapStateResponseMapVariant(betterproto.Message):
    map_variant: int = betterproto.uint32_field(1)
    claimed_rooms_1: int = betterproto.fixed64_field(2)
    claimed_rooms_2: int = betterproto.fixed64_field(3)
    revealed_rooms_1: int = betterproto.fixed64_field(4)
    revealed_rooms_2: int = betterproto.fixed64_field(5)
    completed_paths_1: int = betterproto.fixed64_field(6)
    completed_paths_2: int = betterproto.fixed64_field(7)
    completed_paths_3: int = betterproto.fixed64_field(8)
    completed_paths_4: int = betterproto.fixed64_field(9)
    half_completed_paths_1: int = betterproto.fixed64_field(10)
    half_completed_paths_2: int = betterproto.fixed64_field(11)
    half_completed_paths_3: int = betterproto.fixed64_field(12)
    half_completed_paths_4: int = betterproto.fixed64_field(13)
    swapped_challenge: List[
        "CMsgClientToGcCavernCrawlRequestMapStateResponseSwappedChallenge"
    ] = betterproto.message_field(14)
    ultra_rare_reward_room_number: int = betterproto.uint32_field(15)
    treasure_map: List["CMsgClientToGcCavernCrawlRequestMapStateResponseTreasureMap"] = betterproto.message_field(16)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlGetClaimedRoomCount(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlGetClaimedRoomCountResponse(betterproto.Message):
    result: "CMsgClientToGcCavernCrawlGetClaimedRoomCountResponseResult" = betterproto.enum_field(1)
    map_variants: List["CMsgClientToGcCavernCrawlGetClaimedRoomCountResponseMapVariant"] = betterproto.message_field(2)
    available_map_variants_mask: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcCavernCrawlGetClaimedRoomCountResponseMapVariant(betterproto.Message):
    map_variant: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDotaMutationList(betterproto.Message):
    mutations: List["CMsgDotaMutationListMutation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaMutationListMutation(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgEventTipsSummaryRequest(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgEventTipsSummaryResponse(betterproto.Message):
    result: bool = betterproto.bool_field(1)
    tips_received: List["CMsgEventTipsSummaryResponseTipper"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgEventTipsSummaryResponseTipper(betterproto.Message):
    tipper_account_id: int = betterproto.uint32_field(1)
    tip_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgSocialFeedRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    self_only: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgSocialFeedResponse(betterproto.Message):
    result: "CMsgSocialFeedResponseResult" = betterproto.enum_field(1)
    feed_events: List["CMsgSocialFeedResponseFeedEvent"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgSocialFeedResponseFeedEvent(betterproto.Message):
    feed_event_id: int = betterproto.uint64_field(1)
    account_id: int = betterproto.uint32_field(2)
    timestamp: int = betterproto.uint32_field(3)
    comment_count: int = betterproto.uint32_field(4)
    event_type: int = betterproto.uint32_field(5)
    event_sub_type: int = betterproto.uint32_field(6)
    param_big_int_1: int = betterproto.uint64_field(7)
    param_int_1: int = betterproto.uint32_field(8)
    param_int_2: int = betterproto.uint32_field(9)
    param_int_3: int = betterproto.uint32_field(10)
    param_string: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class CMsgSocialFeedCommentsRequest(betterproto.Message):
    feed_event_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgSocialFeedCommentsResponse(betterproto.Message):
    result: "CMsgSocialFeedCommentsResponseResult" = betterproto.enum_field(1)
    feed_comments: List["CMsgSocialFeedCommentsResponseFeedComment"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgSocialFeedCommentsResponseFeedComment(betterproto.Message):
    commenter_account_id: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)
    comment_text: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcPlayerCardSpecificPurchaseRequest(betterproto.Message):
    player_account_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)
    card_dust_item_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcPlayerCardSpecificPurchaseResponse(betterproto.Message):
    result: "CMsgClientToGcPlayerCardSpecificPurchaseResponseResult" = betterproto.enum_field(1)
    item_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestContestVotes(betterproto.Message):
    contest_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestContestVotesResponse(betterproto.Message):
    result: "CMsgClientToGcRequestContestVotesResponseEResponse" = betterproto.enum_field(1)
    votes: List["CMsgClientToGcRequestContestVotesResponseItemVote"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestContestVotesResponseItemVote(betterproto.Message):
    contest_item_id: int = betterproto.uint64_field(1)
    vote: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecordContestVote(betterproto.Message):
    contest_id: int = betterproto.uint32_field(1)
    contest_item_id: int = betterproto.uint64_field(2)
    vote: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientRecordContestVoteResponse(betterproto.Message):
    eresult: "CMsgGcToClientRecordContestVoteResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotadpcFeed(betterproto.Message):
    elements: List["CMsgDotadpcFeedElement"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotadpcFeedElement(betterproto.Message):
    type: "CMsgDotadpcFeedEFeedElementType" = betterproto.enum_field(1)
    timestamp: int = betterproto.uint32_field(2)
    series_id: int = betterproto.uint32_field(3)
    match_id: int = betterproto.uint64_field(4)
    team_id: int = betterproto.uint32_field(5)
    account_id: int = betterproto.uint32_field(6)
    league_id: int = betterproto.uint32_field(7)
    node_id: int = betterproto.uint32_field(8)
    server_steam_id: int = betterproto.uint64_field(13)
    data_1: int = betterproto.uint32_field(9)
    data_2: int = betterproto.uint32_field(10)
    data_3: int = betterproto.uint32_field(11)
    data_4: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class CMsgDotadpcUserInfo(betterproto.Message):
    is_plus_subscriber: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgDevGrantEventPoints(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    event_points: int = betterproto.uint32_field(2)
    premium_points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDevGrantEventPointsResponse(betterproto.Message):
    result: "EDevEventRequestResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDevGrantEventAction(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    action_id: int = betterproto.uint32_field(2)
    action_score: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDevGrantEventActionResponse(betterproto.Message):
    result: "EDevEventRequestResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDevDeleteEventActions(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    start_action_id: int = betterproto.uint32_field(2)
    end_action_id: int = betterproto.uint32_field(3)
    remove_audit: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CMsgDevDeleteEventActionsResponse(betterproto.Message):
    result: "EDevEventRequestResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDevResetEventState(betterproto.Message):
    event_id: "_dota_shared_enums__.EEvent" = betterproto.enum_field(1)
    remove_audit: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgDevResetEventStateResponse(betterproto.Message):
    result: "EDevEventRequestResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgConsumeEventSupportGrantItem(betterproto.Message):
    item_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgConsumeEventSupportGrantItemResponse(betterproto.Message):
    result: "ESupportEventRequestResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetFilteredPlayers(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcToClientGetFilteredPlayersResponse(betterproto.Message):
    result: "CMsgGcToClientGetFilteredPlayersResponseResult" = betterproto.enum_field(1)
    filtered_players: List["CMsgGcToClientGetFilteredPlayersResponseCFilterEntry"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientGetFilteredPlayersResponseCFilterEntry(betterproto.Message):
    account_id: int = betterproto.fixed32_field(1)
    time_added: int = betterproto.fixed32_field(2)
    time_expires: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRemoveFilteredPlayer(betterproto.Message):
    account_id_to_remove: int = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientRemoveFilteredPlayerResponse(betterproto.Message):
    result: "CMsgGcToClientRemoveFilteredPlayerResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgPartySearchPlayer(betterproto.Message):
    account_id: int = betterproto.fixed32_field(1)
    match_id: int = betterproto.fixed64_field(2)
    creation_time: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientPlayerBeaconState(betterproto.Message):
    num_active_beacons: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientPartyBeaconUpdate(betterproto.Message):
    beacon_added: bool = betterproto.bool_field(1)
    beacon_type: int = betterproto.int32_field(2)
    account_id: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUpdatePartyBeacon(betterproto.Message):
    action: "CMsgClientToGcUpdatePartyBeaconAction" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestActiveBeaconParties(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgGcToClientRequestActiveBeaconPartiesResponse(betterproto.Message):
    response: "CMsgGcToClientRequestActiveBeaconPartiesResponseEResponse" = betterproto.enum_field(1)
    active_parties: List["_dota_gcmessages_common__.CPartySearchClientParty"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcJoinPartyFromBeacon(betterproto.Message):
    party_id: int = betterproto.fixed64_field(1)
    account_id: int = betterproto.fixed32_field(2)
    beacon_type: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientJoinPartyFromBeaconResponse(betterproto.Message):
    response: "CMsgGcToClientJoinPartyFromBeaconResponseEResponse" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcManageFavorites(betterproto.Message):
    action: "CMsgClientToGcManageFavoritesAction" = betterproto.enum_field(1)
    account_id: int = betterproto.fixed32_field(2)
    favorite_name: str = betterproto.string_field(3)
    invite_response: bool = betterproto.bool_field(4)
    from_friendlist: bool = betterproto.bool_field(5)
    lobby_id: int = betterproto.fixed64_field(6)


@dataclass(eq=False, repr=False)
class CMsgGcToClientManageFavoritesResponse(betterproto.Message):
    response: "CMsgGcToClientManageFavoritesResponseEResponse" = betterproto.enum_field(1)
    debug_message: str = betterproto.string_field(2)
    player: "CMsgPartySearchPlayer" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetFavoritePlayers(betterproto.Message):
    pagination_key: int = betterproto.uint64_field(1)
    pagination_count: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientGetFavoritePlayersResponse(betterproto.Message):
    response: "CMsgGcToClientGetFavoritePlayersResponseEResponse" = betterproto.enum_field(1)
    players: List["CMsgPartySearchPlayer"] = betterproto.message_field(2)
    next_pagination_key: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientPartySearchInvite(betterproto.Message):
    account_id: int = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVerifyFavoritePlayers(betterproto.Message):
    account_ids: List[int] = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientVerifyFavoritePlayersResponse(betterproto.Message):
    results: List["CMsgGcToClientVerifyFavoritePlayersResponseResult"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientVerifyFavoritePlayersResponseResult(betterproto.Message):
    player: "CMsgPartySearchPlayer" = betterproto.message_field(1)
    is_favorite: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerRecentAccomplishments(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerRecentAccomplishmentsResponse(betterproto.Message):
    result: "CMsgClientToGcRequestPlayerRecentAccomplishmentsResponseEResponse" = betterproto.enum_field(1)
    player_accomplishments: "_dota_gcmessages_common__.CMsgPlayerRecentAccomplishments" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerHeroRecentAccomplishments(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    hero_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerHeroRecentAccomplishmentsResponse(betterproto.Message):
    result: "CMsgClientToGcRequestPlayerHeroRecentAccomplishmentsResponseEResponse" = betterproto.enum_field(1)
    hero_accomplishments: "_dota_gcmessages_common__.CMsgPlayerHeroRecentAccomplishments" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgPlayerCoachMatch(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    match_outcome: "_dota_shared_enums__.EMatchOutcome" = betterproto.enum_field(2)
    coached_team: int = betterproto.uint32_field(3)
    start_time: int = betterproto.fixed32_field(4)
    duration: int = betterproto.uint32_field(5)
    teammate_ratings: List["ECoachTeammateRating"] = betterproto.enum_field(6)
    coach_flags: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerCoachMatches(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerCoachMatchesResponse(betterproto.Message):
    result: "CMsgClientToGcRequestPlayerCoachMatchesResponseEResponse" = betterproto.enum_field(1)
    coach_matches: List["CMsgPlayerCoachMatch"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerCoachMatch(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcRequestPlayerCoachMatchResponse(betterproto.Message):
    result: "CMsgClientToGcRequestPlayerCoachMatchResponseEResponse" = betterproto.enum_field(1)
    coach_match: "CMsgPlayerCoachMatch" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitCoachTeammateRating(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    coach_account_id: int = betterproto.uint32_field(2)
    rating: "ECoachTeammateRating" = betterproto.enum_field(3)
    reason: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitCoachTeammateRatingResponse(betterproto.Message):
    result: "CMsgClientToGcSubmitCoachTeammateRatingResponseEResponse" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientCoachTeammateRatingsChanged(betterproto.Message):
    coach_match: "CMsgPlayerCoachMatch" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitPlayerMatchSurvey(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    rating: int = betterproto.sint32_field(3)
    flags: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitPlayerMatchSurveyResponse(betterproto.Message):
    eresult: "CMsgClientToGcSubmitPlayerMatchSurveyResponseEResponse" = betterproto.enum_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetTicketCodesRequest(betterproto.Message):
    ticket_pool_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetTicketCodesResponse(betterproto.Message):
    codes: List["CMsgClientToGcGetTicketCodesResponseCode"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetTicketCodesResponseCode(betterproto.Message):
    ticket_pool_id: int = betterproto.uint32_field(1)
    code: str = betterproto.string_field(2)
    account_disallowed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetFavoriteAllStarPlayer(betterproto.Message):
    player_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetFavoriteAllStarPlayerResponse(betterproto.Message):
    result: "CMsgClientToGcSetFavoriteAllStarPlayerResponseEResponse" = betterproto.enum_field(1)
    player_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetFavoriteAllStarPlayerRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetFavoriteAllStarPlayerResponse(betterproto.Message):
    result: "CMsgClientToGcGetFavoriteAllStarPlayerResponseEResponse" = betterproto.enum_field(1)
    player_id: int = betterproto.uint32_field(2)
    picking_allowed_until: int = betterproto.uint32_field(3)
    earned_battle_points: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcVerifyIntegrity(betterproto.Message):
    currency: int = betterproto.uint32_field(1)
    additional_user_message: int = betterproto.uint32_field(2)
    acked: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CMsgGcToClientVacReminder(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRequest(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)
    account_id: int = betterproto.uint32_field(2)
    event_id: int = betterproto.uint32_field(3)
    draft_data: "_dota_gcmessages_common__.CMsgUnderDraftData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftReroll(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRerollResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)
    event_id: int = betterproto.uint32_field(2)
    draft_data: "_dota_gcmessages_common__.CMsgUnderDraftData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftBuy(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    slot_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgGcToClientGuildUnderDraftGoldUpdated(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftBuyResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)
    event_id: int = betterproto.uint32_field(2)
    slot_id: int = betterproto.uint32_field(3)
    draft_data: "_dota_gcmessages_common__.CMsgUnderDraftData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRollBackBench(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRollBackBenchResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)
    event_id: int = betterproto.uint32_field(2)
    draft_data: "_dota_gcmessages_common__.CMsgUnderDraftData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftSell(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    slot_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftSellResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)
    event_id: int = betterproto.uint32_field(2)
    slot_id: int = betterproto.uint32_field(3)
    draft_data: "_dota_gcmessages_common__.CMsgUnderDraftData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRedeemReward(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    action_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRedeemRewardResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRedeemSpecialReward(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcUnderDraftRedeemSpecialRewardResponse(betterproto.Message):
    result: "EUnderDraftResponse" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgTeamFanContentStatus(betterproto.Message):
    team_status_list: List["CMsgTeamFanContentStatusTeamStatus"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgTeamFanContentStatusTeamStatus(betterproto.Message):
    name: str = betterproto.string_field(1)
    team_id: int = betterproto.uint32_field(2)
    logo_url: str = betterproto.string_field(3)
    status: "ETeamFanContentStatus" = betterproto.enum_field(4)
    timestamp: int = betterproto.uint32_field(5)
    zip_url: str = betterproto.string_field(6)
    ugc_logo: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class CMsgSetTeamFanContentStatus(betterproto.Message):
    team_id: int = betterproto.uint32_field(1)
    status: "ETeamFanContentStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CMsgSetTeamFanContentStatusResponse(betterproto.Message):
    result: "CMsgSetTeamFanContentStatusResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDraftTrivia(betterproto.Message):
    has_valid_match: bool = betterproto.bool_field(1)
    match_hero_info: "CMsgDraftTriviaDraftTriviaMatchInfo" = betterproto.message_field(2)
    match_rank_tier: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    event_id: int = betterproto.uint32_field(5)
    current_match_voted_radiant: bool = betterproto.bool_field(6)
    previous_result: "CMsgDraftTriviaPreviousResult" = betterproto.message_field(7)
    current_streak: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgDraftTriviaDraftTriviaHeroInfo(betterproto.Message):
    hero_id: int = betterproto.uint32_field(1)
    role: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDraftTriviaDraftTriviaMatchInfo(betterproto.Message):
    radiant_heroes: List["CMsgDraftTriviaDraftTriviaHeroInfo"] = betterproto.message_field(1)
    dire_heroes: List["CMsgDraftTriviaDraftTriviaHeroInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDraftTriviaPreviousResult(betterproto.Message):
    voted_correctly: bool = betterproto.bool_field(1)
    voted_radiant: bool = betterproto.bool_field(2)
    match_hero_info: "CMsgDraftTriviaDraftTriviaMatchInfo" = betterproto.message_field(3)
    match_rank_tier: int = betterproto.uint32_field(4)
    end_time: int = betterproto.uint32_field(5)
    match_id: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitDraftTriviaMatchAnswer(betterproto.Message):
    chose_radiant_as_winner: bool = betterproto.bool_field(1)
    event_id: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitDraftTriviaMatchAnswerResponse(betterproto.Message):
    result: "EdotaDraftTriviaAnswerResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDraftTriviaVoteCount(betterproto.Message):
    total_votes: int = betterproto.uint32_field(1)
    radiant_votes: int = betterproto.uint32_field(2)
    dire_votes: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcApplyGauntletTicket(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecalibrateMmr(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcRecalibrateMmrResponse(betterproto.Message):
    result: "CMsgClientToGcRecalibrateMmrResponseEResponse" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDotaPostGameItemAwardNotification(betterproto.Message):
    receiver_account_id: int = betterproto.uint32_field(1)
    item_def_index: List[int] = betterproto.uint32_field(2)
    action_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetOwMatchDetails(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetOwMatchDetailsResponse(betterproto.Message):
    result: "CMsgClientToGcGetOwMatchDetailsResponseEResponse" = betterproto.enum_field(1)
    overwatch_replay_id: int = betterproto.uint64_field(2)
    decryption_key: int = betterproto.uint64_field(3)
    cluster: int = betterproto.uint32_field(4)
    overwatch_salt: int = betterproto.uint32_field(5)
    target_player_slot: int = betterproto.uint32_field(6)
    markers: List["CMsgClientToGcGetOwMatchDetailsResponseMarker"] = betterproto.message_field(7)
    report_reason: "_dota_shared_enums__.EOverwatchReportReason" = betterproto.enum_field(8)
    target_hero_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetOwMatchDetailsResponseMarker(betterproto.Message):
    start_game_time_s: int = betterproto.uint32_field(1)
    end_game_time_s: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitOwConviction(betterproto.Message):
    overwatch_replay_id: int = betterproto.uint64_field(1)
    target_player_slot: int = betterproto.uint32_field(2)
    cheating_conviction: "_dota_gcmessages_common__.EOverwatchConviction" = betterproto.enum_field(3)
    griefing_conviction: "_dota_gcmessages_common__.EOverwatchConviction" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSubmitOwConvictionResponse(betterproto.Message):
    result: "CMsgClientToGcSubmitOwConvictionResponseEResponse" = betterproto.enum_field(1)
    overwatch_replay_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcChinaSsaurlRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcChinaSsaurlResponse(betterproto.Message):
    agreement_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcChinaSsaAcceptedRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcChinaSsaAcceptedResponse(betterproto.Message):
    agreement_accepted: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CMsgGcToClientOverwatchCasesAvailable(betterproto.Message):
    expire_time: int = betterproto.fixed32_field(1)


@dataclass(eq=False, repr=False)
class CMsgClientToGcStartWatchingOverwatch(betterproto.Message):
    overwatch_replay_id: int = betterproto.uint64_field(1)
    target_player_slot: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcStopWatchingOverwatch(betterproto.Message):
    overwatch_replay_id: int = betterproto.uint64_field(1)
    target_player_slot: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetDpcFavorites(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetDpcFavoritesResponse(betterproto.Message):
    result: "CMsgClientToGcGetDpcFavoritesResponseEResponse" = betterproto.enum_field(1)
    favorites: List["CMsgClientToGcGetDpcFavoritesResponseFavorite"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcGetDpcFavoritesResponseFavorite(betterproto.Message):
    favorite_type: "_dota_shared_enums__.EdpcFavoriteType" = betterproto.enum_field(1)
    favorite_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetDpcFavoriteState(betterproto.Message):
    favorite_type: "_dota_shared_enums__.EdpcFavoriteType" = betterproto.enum_field(1)
    favorite_id: int = betterproto.uint32_field(2)
    enabled: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgClientToGcSetDpcFavoriteStateResponse(betterproto.Message):
    result: "CMsgClientToGcSetDpcFavoriteStateResponseEResponse" = betterproto.enum_field(1)


from .. import (
    base_gcmessages as _base_gcmessages__,
    dota_gcmessages_common as _dota_gcmessages_common__,
    dota_gcmessages_common_match_management as _dota_gcmessages_common_match_management__,
    dota_shared_enums as _dota_shared_enums__,
    econ_gcmessages as _econ_gcmessages__,
    gcsdk_gcmessages as _gcsdk_gcmessages__,
)
