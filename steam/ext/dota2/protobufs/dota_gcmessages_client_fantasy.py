# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: dota_gcmessages_client_fantasy.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List

import betterproto

from .dota_shared_enums import FantasyRoles, FantasySelectionMode


class DOTA2013PassportSelectionIndices(betterproto.Enum):
    AllstarPlayer0 = 0
    AllstarPlayer1 = 1
    AllstarPlayer2 = 2
    AllstarPlayer3 = 3
    AllstarPlayer4 = 4
    AllstarPlayer5 = 5
    AllstarPlayer6 = 6
    AllstarPlayer7 = 7
    AllstarPlayer8 = 8
    AllstarPlayer9 = 9
    QualpredWest0 = 10
    QualpredWest1 = 11
    QualpredWest2 = 12
    QualpredWest3 = 13
    QualpredWest4 = 14
    QualpredWest5 = 15
    QualpredWest6 = 16
    QualpredWest7 = 17
    QualpredWest8 = 18
    QualpredWest9 = 19
    QualpredWest10 = 20
    QualpredWest11 = 21
    QualpredWest12 = 22
    QualpredWest13 = 23
    QualpredWest14 = 24
    QualpredEast0 = 25
    QualpredEast1 = 26
    QualpredEast2 = 27
    QualpredEast3 = 28
    QualpredEast4 = 29
    QualpredEast5 = 30
    QualpredEast6 = 31
    QualpredEast7 = 32
    QualpredEast8 = 33
    QualpredEast9 = 34
    QualpredEast10 = 35
    QualpredEast11 = 36
    QualpredEast12 = 37
    QualpredEast13 = 38
    QualpredEast14 = 39
    TeamcupTeam = 40
    TeamcupPlayer = 41
    TeamcupTeamLock = 42
    TeamcupPlayerLock = 43
    Eventpred0 = 44
    Eventpred1 = 45
    Eventpred2 = 46
    Eventpred3 = 47
    Eventpred4 = 48
    Eventpred5 = 49
    Eventpred6 = 50
    Eventpred7 = 51
    Eventpred8 = 52
    Eventpred9 = 53
    Eventpred10 = 54
    Eventpred11 = 55
    Eventpred12 = 56
    Eventpred13 = 57
    Eventpred14 = 58
    Eventpred15 = 59
    Eventpred16 = 60
    Eventpred17 = 61
    Eventpred18 = 62
    Eventpred19 = 63
    Eventpred20 = 64
    Eventpred21 = 65
    Eventpred22 = 66
    Eventpred23 = 67
    Eventpred24 = 68
    Eventpred25 = 69
    Eventpred26 = 70
    Eventpred27 = 71
    Eventpred28 = 72
    Eventpred29 = 73
    Eventpred30 = 74
    Eventpred31 = 75
    Eventpred32 = 76
    Eventpred33 = 77
    Eventpred34 = 78
    Eventpred35 = 79
    Eventpred36 = 80
    Eventpred37 = 81
    Eventpred38 = 82
    Eventpred39 = 83
    Eventpred40 = 84
    Eventpred41 = 85
    Eventpred42 = 86
    Eventpred43 = 87
    Solo0 = 88
    Solo1 = 89
    Solo2 = 90
    Solo3 = 91
    Solo4 = 92
    Solo5 = 93
    Solo6 = 94
    Solo7 = 95


class CMsgDOTACreateFantasyLeagueResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorTooManyLeagues = 2
    ErrorInvalidTeamCount = 3
    ErrorCreationDisabled = 4


class CMsgDOTAFantasyLeagueEditInfoResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyLeagueFindResponseEResult(betterproto.Enum):
    Success = 0
    ErrorLeagueNotFound = 1
    ErrorBadPassword = 2
    ErrorUnspecified = 3
    ErrorFull = 4
    ErrorAlreadyMember = 5
    ErrorLeagueLocked = 6


class CMsgDOTAFantasyLeagueInfoResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorBadLeagueId = 2


class CMsgDOTAFantasyLeagueMatchupsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorBadLeagueId = 2
    ErrorNoPermission = 3


class CMsgDOTAEditFantasyTeamResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorInvalidTeamInfo = 2
    ErrorNameAlreadyTaken = 3
    ErrorNoPermission = 4


class CMsgDOTAFantasyTeamScoreResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2
    ErrorOwnerNotInLeague = 3


class CMsgDOTAFantasyTeamStandingsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyPlayerScoreResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyPlayerStandingsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyLeagueCreateResponseEResult(betterproto.Enum):
    Success = 0
    ErrorNoPermission = 1
    ErrorBadSeasonId = 2
    ErrorBadLeagueName = 3
    ErrorBadTeamName = 4
    ErrorUnspecified = 5
    ErrorFailedLogoUpload = 6
    ErrorNoTicket = 7


class CMsgDOTAFantasyTeamCreateResponseEResult(betterproto.Enum):
    Success = 0
    ErrorNoPermission = 1
    ErrorFailedLogoUpload = 2
    ErrorBadFantasyLeagueId = 3
    ErrorBadName = 4
    ErrorFull = 5
    ErrorAlreadyMember = 6
    ErrorBadPassword = 7
    ErrorUnspecified = 8
    ErrorNoTicket = 9
    ErrorLeagueLocked = 10


class CMsgDOTAFantasyLeagueEditInvitesResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1


class CMsgDOTAFantasyLeagueDraftPlayerResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorInvalidFantasyLeague = 2
    ErrorFantasyLeagueNotDrafting = 3
    ErrorOwnerNotInLeague = 4
    ErrorNotOwnersTurn = 5
    ErrorPlayerInvalid = 6
    ErrorPlayerUnavailable = 7
    ErrorPlayerNoValidSlots = 8


class CMsgDOTAFantasyTeamRosterSwapResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorOwnerNotInLeague = 2
    ErrorSlotsInvalid = 3
    ErrorSlotLocked = 4


class CMsgDOTAFantasyTeamRosterAddDropResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorOwnerNotInLeague = 2
    ErrorPlayerNotAvailable = 3
    ErrorPlayerNotOnTeam = 4
    ErrorTradeAlreadyPending = 5


class CMsgDOTAFantasyTeamTradesResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyTeamTradeCancelResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2
    ErrorNoTrade = 3


class CMsgDOTAFantasyTeamRosterResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2
    ErrorOwnerNotInLeague = 3


class CMsgDOTAFantasyPlayerHistoricalStatsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyMessagesResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2


class CMsgDOTAFantasyRemoveOwnerResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNoPermission = 2
    ErrorLeagueLocked = 3
    ErrorNotAMember = 4


class CMsgDOTAFantasyScheduledMatchesResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1


class CMsgDOTAFantasyLeaveLeagueResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNotMember = 2
    ErrorLeagueNotFound = 3
    ErrorDraftActive = 4


class CMsgDOTAFantasyPlayerScoreDetailsResponseEResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorNotMember = 2


class CMsgClientToGCGetPlayerCardRosterResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorInvalidLeagueId = 2
    ErrorInvalidTimestamp = 3


class CMsgClientToGCSetPlayerCardRosterResponseResult(betterproto.Enum):
    Success = 0
    ErrorUnspecified = 1
    ErrorInvalidLeagueId = 2
    ErrorInvalidTimestamp = 3
    ErrorPlayerCardNotOwned = 4
    ErrorInvalidSlot = 5
    ErrorFailedCardInfo = 6
    ErrorAccountDuplicate = 7
    ErrorLockedTimestamp = 8


class CMsgDOTAFantasyDPCLeagueStatusERosterStatus(betterproto.Enum):
    Unset = 0
    Partial = 1
    Full = 2
    Concluded = 3


@dataclass(eq=False, repr=False)
class CMsgDOTAPlayerInfo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    country_code: str = betterproto.string_field(3)
    fantasy_role: "FantasyRoles" = betterproto.enum_field(4)
    team_id: int = betterproto.uint32_field(5)
    team_name: str = betterproto.string_field(6)
    team_tag: str = betterproto.string_field(7)
    sponsor: str = betterproto.string_field(8)
    is_locked: bool = betterproto.bool_field(9)
    is_pro: bool = betterproto.bool_field(10)
    real_name: str = betterproto.string_field(11)
    birthdate: int = betterproto.uint32_field(12)
    total_earnings: int = betterproto.uint32_field(13)
    results: List["CMsgDOTAPlayerInfoResults"] = betterproto.message_field(14)
    team_url_logo: str = betterproto.string_field(15)
    audit_entries: List["CMsgDOTAPlayerInfoAuditEntry"] = betterproto.message_field(16)


@dataclass(eq=False, repr=False)
class CMsgDOTAPlayerInfoResults(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    placement: int = betterproto.uint32_field(2)
    earnings: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAPlayerInfoAuditEntry(betterproto.Message):
    start_timestamp: int = betterproto.uint32_field(1)
    end_timestamp: int = betterproto.uint32_field(2)
    team_id: int = betterproto.uint32_field(3)
    team_name: str = betterproto.string_field(4)
    team_tag: str = betterproto.string_field(5)
    team_url_logo: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CMsgDOTAPlayerInfoList(betterproto.Message):
    player_infos: List["CMsgDOTAPlayerInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTADPCProfileInfo(betterproto.Message):
    player_info: "CMsgDOTAPlayerInfo" = betterproto.message_field(1)
    prediction_info: "CMsgDOTADPCProfileInfoPredictionInfo" = betterproto.message_field(2)
    fantasy_info: "CMsgDOTADPCProfileInfoFantasyInfo" = betterproto.message_field(3)
    disabled_notifications: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTADPCProfileInfoPredictionInfo(betterproto.Message):
    percent: int = betterproto.uint32_field(1)
    shard_winnings: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTADPCProfileInfoFantasyInfo(betterproto.Message):
    top_90_finishes: int = betterproto.uint32_field(1)
    top_75_finishes: int = betterproto.uint32_field(2)
    top_50_finishes: int = betterproto.uint32_field(3)
    shard_winnings: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTALeaderboards(betterproto.Message):
    leaderboards: List["CMsgDOTALeaderboardsRegionLeaderboard"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTALeaderboardsRegionLeaderboard(betterproto.Message):
    division: int = betterproto.uint32_field(1)
    account_ids: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTACreateFantasyLeagueRequest(betterproto.Message):
    league_name: str = betterproto.string_field(1)
    league_logo: int = betterproto.uint64_field(2)
    selection_mode: "FantasySelectionMode" = betterproto.enum_field(3)
    team_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTACreateFantasyLeagueResponse(betterproto.Message):
    result: "CMsgDOTACreateFantasyLeagueResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgFantasyLeagueScoring(betterproto.Message):
    level: float = betterproto.float_field(1)
    kills: float = betterproto.float_field(2)
    deaths: float = betterproto.float_field(3)
    assists: float = betterproto.float_field(4)
    last_hits: float = betterproto.float_field(5)
    denies: float = betterproto.float_field(6)
    gpm: float = betterproto.float_field(7)
    xppm: float = betterproto.float_field(8)
    stuns: float = betterproto.float_field(9)
    healing: float = betterproto.float_field(10)
    tower_kills: float = betterproto.float_field(11)
    roshan_kills: float = betterproto.float_field(12)
    multiplier_premium: float = betterproto.float_field(13)
    multiplier_professional: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueInfo(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    commissioner_account_id: int = betterproto.uint32_field(2)
    fantasy_league_name: str = betterproto.string_field(3)
    selection_mode: "FantasySelectionMode" = betterproto.enum_field(4)
    team_count: int = betterproto.uint32_field(5)
    logo: int = betterproto.uint64_field(6)
    scoring: "CMsgFantasyLeagueScoring" = betterproto.message_field(7)
    draft_time: int = betterproto.uint32_field(12)
    draft_pick_time: int = betterproto.uint32_field(13)
    season_start: int = betterproto.uint32_field(15)
    season_length: int = betterproto.uint32_field(16)
    veto_votes: int = betterproto.uint32_field(17)
    acquisitions: int = betterproto.uint32_field(18)
    slot_1: int = betterproto.uint32_field(19)
    slot_2: int = betterproto.uint32_field(20)
    slot_3: int = betterproto.uint32_field(21)
    slot_4: int = betterproto.uint32_field(22)
    slot_5: int = betterproto.uint32_field(23)
    bench_slots: int = betterproto.uint32_field(24)
    owner_info: List["CMsgDOTAFantasyLeagueInfoOwnerInfo"] = betterproto.message_field(25)
    players: List[int] = betterproto.uint32_field(26)
    time_zone: int = betterproto.uint32_field(27)
    season: int = betterproto.uint32_field(28)
    password: str = betterproto.string_field(29)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueInfoOwnerInfo(betterproto.Message):
    owner_account_id: int = betterproto.uint32_field(1)
    left_league: bool = betterproto.bool_field(2)
    player_account_id: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueEditInfoRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    edit_info: "CMsgDOTAFantasyLeagueInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueEditInfoResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueEditInfoResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueFindRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    password: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueFindResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueFindResponseEResult" = betterproto.enum_field(1)
    fantasy_league_name: str = betterproto.string_field(2)
    commissioner_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueInfoRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueInfoResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueInfoResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueMatchupsRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueMatchupsResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueMatchupsResponseEResult" = betterproto.enum_field(1)
    fantasy_league_id: int = betterproto.uint32_field(2)
    weekly_matchups: List["CMsgDOTAFantasyLeagueMatchupsResponseWeeklyMatchups"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueMatchupsResponseMatchup(betterproto.Message):
    owner_account_id_1: int = betterproto.uint32_field(1)
    owner_account_id_2: int = betterproto.uint32_field(2)
    score_1: float = betterproto.float_field(3)
    score_2: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueMatchupsResponseWeeklyMatchups(betterproto.Message):
    matchup: List["CMsgDOTAFantasyLeagueMatchupsResponseMatchup"] = betterproto.message_field(1)
    start_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAEditFantasyTeamRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    team_index: int = betterproto.uint32_field(2)
    team_name: str = betterproto.string_field(3)
    team_logo: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTAEditFantasyTeamResponse(betterproto.Message):
    result: "CMsgDOTAEditFantasyTeamResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(betterproto.Message):
    owner_account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamInfoResponse(betterproto.Message):
    results: List["CMsgDOTAFantasyTeamInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamInfo(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    fantasy_team_index: int = betterproto.uint32_field(3)
    team_name: str = betterproto.string_field(4)
    team_logo: int = betterproto.uint64_field(5)
    wins: int = betterproto.uint32_field(6)
    losses: int = betterproto.uint32_field(7)
    current_roster: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamScoreRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    fantasy_team_index: int = betterproto.uint32_field(3)
    filter_match_id: int = betterproto.uint64_field(4)
    filter_start_time: int = betterproto.uint32_field(5)
    filter_end_time: int = betterproto.uint32_field(6)
    include_bench: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamScoreResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamScoreResponseEResult" = betterproto.enum_field(1)
    fantasy_team_score: float = betterproto.float_field(2)
    fantasy_player_score: List["CMsgDOTAFantasyTeamScoreResponseCMsgPlayerScore"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamScoreResponseCMsgPlayerScore(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    score: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamStandingsRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    filter_start_time: int = betterproto.uint32_field(3)
    filter_end_time: int = betterproto.uint32_field(4)
    filter_match_id: int = betterproto.uint64_field(5)
    filter_last_match: bool = betterproto.bool_field(6)
    filter_in_hall: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamStandingsResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamStandingsResponseEResult" = betterproto.enum_field(1)
    team_scores: List["CMsgDOTAFantasyTeamStandingsResponseCMsgTeamScore"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamStandingsResponseCMsgTeamScore(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    fantasy_team_index: int = betterproto.uint32_field(3)
    fantasy_team_logo: int = betterproto.uint64_field(4)
    owner_name: str = betterproto.string_field(5)
    fantasy_team_name: str = betterproto.string_field(6)
    score: float = betterproto.float_field(7)
    score_against: float = betterproto.float_field(8)
    wins: int = betterproto.uint32_field(9)
    losses: int = betterproto.uint32_field(10)
    streak: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerScoreRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    player_account_id: int = betterproto.uint32_field(2)
    filter_start_time: int = betterproto.uint32_field(3)
    filter_end_time: int = betterproto.uint32_field(4)
    filter_match_id: int = betterproto.uint64_field(5)
    filter_last_match: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerScoreResponse(betterproto.Message):
    result: "CMsgDOTAFantasyPlayerScoreResponseEResult" = betterproto.enum_field(1)
    fantasy_league_id: int = betterproto.uint32_field(2)
    player_account_id: int = betterproto.uint32_field(3)
    player_name: str = betterproto.string_field(4)
    score: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerStandingsRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    role: int = betterproto.uint32_field(3)
    filter_start_time: int = betterproto.uint32_field(4)
    filter_end_time: int = betterproto.uint32_field(5)
    filter_match_id: int = betterproto.uint64_field(6)
    filter_last_match: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerStandingsResponse(betterproto.Message):
    result: "CMsgDOTAFantasyPlayerStandingsResponseEResult" = betterproto.enum_field(1)
    fantasy_league_id: int = betterproto.uint32_field(2)
    role: int = betterproto.uint32_field(3)
    player_scores: List["CMsgDOTAFantasyPlayerStandingsResponseCMsgPlayerScore"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerStandingsResponseCMsgPlayerScore(betterproto.Message):
    player_account_id: int = betterproto.uint32_field(1)
    player_name: str = betterproto.string_field(2)
    score: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueCreateRequest(betterproto.Message):
    season_id: int = betterproto.uint32_field(1)
    fantasy_league_name: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    team_name: str = betterproto.string_field(4)
    logo: int = betterproto.uint64_field(5)
    ticket_item_id: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueCreateResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueCreateResponseEResult" = betterproto.enum_field(1)
    fantasy_league_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamCreateRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    password: str = betterproto.string_field(2)
    team_name: str = betterproto.string_field(3)
    logo: int = betterproto.uint64_field(4)
    ticket_item_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamCreateResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamCreateResponseEResult" = betterproto.enum_field(1)
    fantasy_team_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueEditInvitesRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    password: str = betterproto.string_field(2)
    invite_change: List["CMsgDOTAFantasyLeagueEditInvitesRequestInviteChange"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueEditInvitesRequestInviteChange(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    invited: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueEditInvitesResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueEditInvitesResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueDraftStatusRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueDraftStatus(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    draft_order: List[int] = betterproto.uint32_field(2)
    current_pick: int = betterproto.uint32_field(3)
    time_remaining: int = betterproto.uint32_field(4)
    pending_resume: bool = betterproto.bool_field(5)
    completed: bool = betterproto.bool_field(6)
    available_players: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueDraftPlayerRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    team_index: int = betterproto.uint32_field(2)
    player_account_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeagueDraftPlayerResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeagueDraftPlayerResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamRosterSwapRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    team_index: int = betterproto.uint32_field(2)
    timestamp: int = betterproto.uint32_field(3)
    slot_1: int = betterproto.uint32_field(4)
    slot_2: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamRosterSwapResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamRosterSwapResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamRosterAddDropRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    team_index: int = betterproto.uint32_field(2)
    add_account_id: int = betterproto.uint32_field(5)
    drop_account_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamRosterAddDropResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamRosterAddDropResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamTradesRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamTradesResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamTradesResponseEResult" = betterproto.enum_field(1)
    trades: List["CMsgDOTAFantasyTeamTradesResponseTrade"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamTradesResponseTrade(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    owner_account_id_1: int = betterproto.uint32_field(2)
    owner_account_id_2: int = betterproto.uint32_field(3)
    player_account_id_1: int = betterproto.uint32_field(4)
    player_account_id_2: int = betterproto.uint32_field(5)
    status: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamTradeCancelRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    team_index_1: int = betterproto.uint32_field(3)
    owner_account_id_2: int = betterproto.uint32_field(4)
    team_index_2: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamTradeCancelResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamTradeCancelResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamRosterRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    team_index: int = betterproto.uint32_field(2)
    owner_account_id: int = betterproto.uint32_field(3)
    timestamp: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyTeamRosterResponse(betterproto.Message):
    result: "CMsgDOTAFantasyTeamRosterResponseEResult" = betterproto.enum_field(1)
    player_account_ids: List[int] = betterproto.uint32_field(2)
    player_locked: List[bool] = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerHistoricalStatsRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerHistoricalStatsResponse(betterproto.Message):
    result: "CMsgDOTAFantasyPlayerHistoricalStatsResponseEResult" = betterproto.enum_field(1)
    stats: List["CMsgDOTAFantasyPlayerHistoricalStatsResponsePlayerStats"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerHistoricalStatsResponsePlayerScoreAccumulator(betterproto.Message):
    matches: int = betterproto.uint32_field(1)
    levels: float = betterproto.float_field(2)
    kills: float = betterproto.float_field(3)
    deaths: float = betterproto.float_field(4)
    assists: float = betterproto.float_field(5)
    last_hits: float = betterproto.float_field(6)
    denies: float = betterproto.float_field(7)
    gpm: float = betterproto.float_field(8)
    xppm: float = betterproto.float_field(9)
    stuns: float = betterproto.float_field(10)
    healing: float = betterproto.float_field(11)
    tower_kills: float = betterproto.float_field(12)
    roshan_kills: float = betterproto.float_field(13)
    score: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerHistoricalStatsResponsePlayerStats(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    weeks: int = betterproto.uint32_field(2)
    stats_premium: "CMsgDOTAFantasyPlayerHistoricalStatsResponsePlayerScoreAccumulator" = betterproto.message_field(4)
    stats_professional: "CMsgDOTAFantasyPlayerHistoricalStatsResponsePlayerScoreAccumulator" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyMessageAdd(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyMessagesRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    start_message: int = betterproto.uint32_field(2)
    end_message: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyMessagesResponse(betterproto.Message):
    result: "CMsgDOTAFantasyMessagesResponseEResult" = betterproto.enum_field(1)
    messages: List["CMsgDOTAFantasyMessagesResponseMessage"] = betterproto.message_field(2)
    num_total_messages: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyMessagesResponseMessage(betterproto.Message):
    message_id: int = betterproto.uint32_field(1)
    message: str = betterproto.string_field(2)
    author_account_id: int = betterproto.uint32_field(3)
    time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyRemoveOwner(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    owner_account_id: int = betterproto.uint32_field(2)
    team_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyRemoveOwnerResponse(betterproto.Message):
    result: "CMsgDOTAFantasyRemoveOwnerResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyScheduledMatchesRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyScheduledMatchesResponse(betterproto.Message):
    result: "CMsgDOTAFantasyScheduledMatchesResponseEResult" = betterproto.enum_field(1)
    scheduled_match_days: List["CMsgDOTAFantasyScheduledMatchesResponseScheduledMatchDays"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyScheduledMatchesResponseScheduledMatchDays(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    team_ids: List[int] = betterproto.uint32_field(2)
    league_ids: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeaveLeagueRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    fantasy_team_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyLeaveLeagueResponse(betterproto.Message):
    result: "CMsgDOTAFantasyLeaveLeagueResponseEResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerScoreDetailsRequest(betterproto.Message):
    fantasy_league_id: int = betterproto.uint32_field(1)
    player_account_id: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerScoreDetailsResponse(betterproto.Message):
    result: "CMsgDOTAFantasyPlayerScoreDetailsResponseEResult" = betterproto.enum_field(1)
    data: List["CMsgDOTAFantasyPlayerScoreDetailsResponsePlayerMatchData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyPlayerScoreDetailsResponsePlayerMatchData(betterproto.Message):
    match_id: int = betterproto.uint64_field(1)
    series_id: int = betterproto.uint32_field(2)
    series_num: int = betterproto.uint32_field(3)
    series_type: int = betterproto.uint32_field(4)
    league_tier: int = betterproto.uint32_field(5)
    league_id: int = betterproto.uint32_field(6)
    opposing_team_id: int = betterproto.uint32_field(7)
    opposing_team_logo: int = betterproto.uint64_field(8)
    opposing_team_name: str = betterproto.string_field(9)
    owned_by: int = betterproto.uint32_field(11)
    benched: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class CMsgDOTAPassportVoteTeamGuess(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    winner_id: int = betterproto.uint32_field(2)
    runnerup_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CMsgDOTAPassportVoteGenericSelection(betterproto.Message):
    selection_index: "DOTA2013PassportSelectionIndices" = betterproto.enum_field(1)
    selection: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAPassportStampedPlayer(betterproto.Message):
    steam_id: int = betterproto.uint64_field(1)
    stamp_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgDOTAPassportPlayerCardChallenge(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAPassportVote(betterproto.Message):
    team_votes: List["CMsgDOTAPassportVoteTeamGuess"] = betterproto.message_field(1)
    generic_selections: List["CMsgDOTAPassportVoteGenericSelection"] = betterproto.message_field(2)
    stamped_players: List["CMsgDOTAPassportStampedPlayer"] = betterproto.message_field(3)
    player_card_challenges: List["CMsgDOTAPassportPlayerCardChallenge"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CMsgClientToGCGetPlayerCardRosterRequest(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CMsgClientToGCGetPlayerCardRosterResponse(betterproto.Message):
    result: "CMsgClientToGCGetPlayerCardRosterResponseResult" = betterproto.enum_field(1)
    player_card_item_id: List[int] = betterproto.uint64_field(2)
    score: float = betterproto.float_field(3)
    finalized: bool = betterproto.bool_field(4)
    percentile: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientToGCSetPlayerCardRosterRequest(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)
    slot: int = betterproto.uint32_field(3)
    player_card_item_id: int = betterproto.uint64_field(4)
    event_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class CMsgClientToGCSetPlayerCardRosterResponse(betterproto.Message):
    result: "CMsgClientToGCSetPlayerCardRosterResponseResult" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyDPCLeagueStatus(betterproto.Message):
    league_infos: List["CMsgDOTAFantasyDPCLeagueStatusLeagueInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CMsgDOTAFantasyDPCLeagueStatusLeagueInfo(betterproto.Message):
    league_id: int = betterproto.uint32_field(1)
    league_name: str = betterproto.string_field(2)
    start_timestamp: int = betterproto.uint32_field(3)
    end_timestamp: int = betterproto.uint32_field(4)
    day_timestamps: List[int] = betterproto.uint32_field(5)
    status: "CMsgDOTAFantasyDPCLeagueStatusERosterStatus" = betterproto.enum_field(8)
